model test;

object type A class com.redhat.persistence.PropertyMap
              adapter com.redhat.persistence.oql.IdentityAdapter {
    BigInteger id = a.a_id;
    String name = a.name;
    Link[0..1] first = qualias { filter(links, index == 0) };
    Link[0..n] links = qualias { filter(all(test.Link), a == this) };
    B[0..n] bees = qualias { links.b };
    Link[0..n] bees\@link = qualias { links };

    object key(id);
}

object type B class com.redhat.persistence.PropertyMap
              adapter com.redhat.persistence.oql.IdentityAdapter {
    BigInteger id = b.b_id;
    String name = b.name;

    object key(id);
}

object type C class com.redhat.persistence.PropertyMap
              adapter com.redhat.persistence.oql.IdentityAdapter {
    BigInteger id = c.c_id;
    String name = c.name;

    object key(id);
}

object type Link class com.redhat.persistence.PropertyMap
                 adapter com.redhat.persistence.oql.IdentityAdapter {
    A a = join l.a_id to a.a_id;
    B b = join l.b_id to b.b_id;
    String name = l.name;
    Integer index = l.index;

    object key(a, b);
}

object type Tuple class com.redhat.persistence.PropertyMap
                  adapter com.redhat.persistence.oql.IdentityAdapter {
    A a = join tup.a_id to a.a_id;
    B b = join tup.b_id to b.b_id;
    C c = join tup.c_id to c.c_id;

    C cee = join tup.cee_id to c.c_id;

    object key(a, b, c);
}

object type StaticTuple class com.redhat.persistence.PropertyMap
                        adapter com.redhat.persistence.oql.IdentityAdapter {
    A a;
    B b;
    C c;

    C cee;

    object key(a, b, c);

    retrieve all {
        do {
            select a_id, b_id, c_id, cee_id
            from tup
        } map {
            a.id = a_id;
            b.id = b_id;
            c.id = c_id;
            cee.id = cee_id;
        }
    }

    retrieve cee {
        do {
            select c.c_id, c.name
            from tup, c
            where tup.cee_id = c.c_id
            and tup.a_id = :a.id
            and tup.b_id = :b.id
            and tup.c_id = :c.id
        } map {
            cee.id = c_id;
            cee.name = name;
        }
    }

}

object type Node class com.redhat.persistence.PropertyMap
                       adapter com.redhat.persistence.oql.IdentityAdapter {
    BigInteger id = st.st_id;
    String name = st.name;
    Node parent = join st.parent_id to st.st_id;
    Node[0..n] children = qualias { filter(all(test.Node), parent == this) };

    object key(id);
}

object type StaticNode class com.redhat.persistence.PropertyMap
                       adapter com.redhat.persistence.oql.IdentityAdapter {
    BigInteger id;
    String name;
    StaticNode parent;
    StaticNode[0..n] children;

    object key(id);

    retrieve all {
        do {
            select st_id, name
            from st
        } map {
            id = st_id;
            name = name;
        }
    }

    retrieve parent {
        do {
            select p.st_id, p.name
            from st ch, st p
            where ch.parent_id = p.st_id
            and ch.st_id = :id
        } map {
            parent.id = st_id;
            parent.name = name;
        }
    }

    retrieve children {
        do {
            select st_id, name
            from st
            where parent_id = :id
        } map {
            children.id = st_id;
            children.name = name;
        }
    }

}

object type User class com.redhat.persistence.PropertyMap
                 adapter com.redhat.persistence.oql.IdentityAdapter {
    BigInteger id = u.u_id;
    String name = u.name;
    String firstName = qualias { name };
    Group[0..n] groups = qualias {
        filter(all(test.Group), exists(filter(m = members, m == this)))
    };

    object key(id);
}

object type Group class com.redhat.persistence.PropertyMap
                  adapter com.redhat.persistence.oql.IdentityAdapter {
    BigInteger id = g.g_id;
    String name = g.name;

    User[0..n] members = join g.g_id to members.g_id,
                         join members.u_id to u.u_id;
    Group[0..n] subgroups = join g.g_id to subgroups.g_id,
                            join subgroups.sg_id to g.g_id;
    Group[0..n] supergroups = qualias {
        filter(all(test.Group),
               exists(filter(g = subgroups, g == this)))
    };

    object key(id);
}
