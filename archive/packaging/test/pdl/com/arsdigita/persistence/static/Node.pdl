//
// Copyright (C) 2001, 2002, 2003 Red Hat Inc. All Rights Reserved.
//
// The contents of this file are subject to the CCM Public
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.redhat.com/licenses/ccmpl.html
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// $Id: //core-platform/test-packaging/test/pdl/com/arsdigita/persistence/static/Node.pdl#2 $ 
// $DateTime: 2003/08/19 22:28:24 $

model examples;

object type Node {
    BigDecimal[1..1] id;
    String name;
    Node[0..1] parent;
    Node[0..n] children;

    object key(id);

    retrieve all {
        do {
            select * from t_nodes
        } map {
            id = t_nodes.node_id;
            name = t_nodes.name;
        }
    }

    retrieve {
        do {
            select *
            from t_nodes
            where node_id = :id
        } map {
            name = t_nodes.name;
        }
    }

    insert {
        do {
            insert into t_nodes
            (node_id, name, parent_id)
            values
            (:id, :name, :parent.id)
        }
    }

    update {
        do {
            update t_nodes
            set name = :name,
                parent_id = :parent.id
            where node_id = :id
        }
    }

    delete {
        do {
            delete from t_nodes where node_id = :id
        }
    }

    retrieve parent {
        do {
            select *
            from t_nodes
            where node_id = (select parent_id from t_nodes where node_id = :id)
        } map {
            parent.id = t_nodes.node_id;
            parent.name = t_nodes.name;
        }
    }

    add parent {}
    remove parent {}

    retrieve children {
        do {
            select *
            from t_nodes
            where parent_id = :id
        } map {
            children.id = t_nodes.node_id;
            children.name = t_nodes.name;
        }
    }
    add children {
    }

}

query nodesQuery {
    BigDecimal id;
    String name;

    do {
        select * from t_nodes
    } map {
        id = t_nodes.node_id;
        name = t_nodes.name;
    }
}

object type LazyNode extends Node {
    // a lazy property with no retrieve
    Node[0..1] lazyProperty;

    retrieve {
        do {
            select *
            from t_nodes
            where node_id = :id
        }
        // We do nothing here in order to trigger lazy loading.
    }

    insert { super; }
    update { super; }
    delete { super; }
}

query lazyNodesQuery {
    LazyNode[1..1] node;
    do {
        select * from t_nodes
    } map {
        node.id = t_nodes.node_id;
    }
}
