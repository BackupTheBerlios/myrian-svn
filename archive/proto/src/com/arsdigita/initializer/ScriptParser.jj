options {
    STATIC = false;
    DEBUG_PARSER = false;
}

PARSER_BEGIN(ScriptParser)

package com.arsdigita.initializer;

import java.lang.reflect.*;
import java.util.*;

/**
 * ScriptParser.java
 *
 * @author <a href="mailto:rhs@mit.edu">rhs@mit.edu</a>
 * @version $Revision: #3 $ $Date: 2003/08/04 $
 */

class ScriptParser {

    public final static String versionId = "$Id: //core-platform/proto/src/com/arsdigita/initializer/ScriptParser.jj#3 $ by $Author: dennis $, $DateTime: 2003/08/04 16:15:53 $";

}

PARSER_END(ScriptParser)

SKIP:
{
    " "
  | "\t"
  | "\n"
  | "\r"
}

TOKEN:
{
    <SEMI: ";">
  | <ASSIGN: "=">
  | <DOT: ".">
  | <COMMA: ",">
  | <LBRACE: "{">
  | <RBRACE: "}">
  | <TRUE: "true">
  | <FALSE: "false">
}

TOKEN [IGNORE_CASE]: 
{
    <INIT: "init">
}

TOKEN:
{
    <ID: <CH>(<CH>|<DIGIT>)*>
  | <#CH: ["a" - "z", "A" - "Z", "_", "$"]>
  | <FLOAT: (<DIGIT>)+ <DOT> (<DIGIT>)+>
  | <INT: (<DIGIT>)+>
  | <#DIGIT: ["0" - "9"]>
  | <STRING: "\"" (~["\""] | "\\\"")* "\"">
}

SPECIAL_TOKEN:
{
    <COMMENT: "//" (~["\n", "\r"])* ("\n"|"\r"|"\r\n")>
}

void parse(Script s) throws InitializationException :
{
    Initializer i;
}
{
    ( i = initializer() { if ( !s.addInitializer(i)) return;  } )* <EOF>
}

Initializer initializer() throws InitializationException :
{
    Initializer i;
    Configuration c;
}
{
    <INIT> i = initializerClass() { c = i.getConfiguration(); }
    <LBRACE>
         ( assignment(c) <SEMI> )*
    <RBRACE>
    { return i; }
}

Initializer initializerClass() throws InitializationException :
{
    Token t;
    StringBuffer className = new StringBuffer();
}
{
    t = <ID> { className.append(t.image); }
    ( <DOT> t = <ID> { className.append("."); className.append(t.image); } ) *
    {
        try {
            Class cls = Class.forName(className.toString());
            Constructor cons = cls.getConstructor(new Class[0]);
            return (Initializer) cons.newInstance(new Object[0]);
        } catch (ClassNotFoundException e) {
            throw new InitializationException("Couldn't find " + className);
        } catch (NoSuchMethodException e) {
            throw new InitializationException(
                className +
                " must implement com.arsdigita.initializer.Initializer"
                );
        } catch (InstantiationException e) {
            throw new InitializationException(
                "Error instantiating " + className + ": " + e.getMessage()
                );
        } catch (ClassCastException e) {
            throw new InitializationException(
                className +
                " must implement com.arsdigita.initializer.Initializer"
                );
        } catch (IllegalAccessException e) {
            throw new InitializationException(className + " must be public.");
        } catch (InvocationTargetException e) {
            throw new InitializationException(
                "Error instantiating " + className + ": " +
                e.getTargetException().getMessage()
                );
        }
    }
}

void assignment(Configuration c) throws InitializationException :
{
    String param;
    Object value;
}
{
    param = lhs() <ASSIGN> value = rhs()
    {
        c.setParameter(param, value);
    }
}

String lhs() :
{
    Token t;
}
{
    t = <ID> { return t.image; }
}

Object rhs() :
{
    Token t;
    Object result;
}
{
    t = <STRING> { return t.image.substring(1, t.image.length() - 1); }
  | t = <INT> { return new Integer(t.image); }
  | t = <FLOAT> { return new Float(t.image); }
  | <TRUE> { return Boolean.TRUE; }
  | <FALSE> { return Boolean.FALSE; }
  | result = list() { return result; }
}


List list() :
{
    List l = new ArrayList();
    Object o;
}
{
    <LBRACE>
        [ o = rhs() { l.add(o); } ( <COMMA> o = rhs() { l.add(o); } )* ]
    <RBRACE>
    { return l; }
}
