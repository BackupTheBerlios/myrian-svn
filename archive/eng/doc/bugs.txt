# Since:   2004-06-29

* Opened
.. PersistenceManager.makePersistent(Object) fails silently (rather
   than violently) when it is invoked on an object that already exists
   in the database. Correct behavior is to do nothing when the
   specified object is associated with the persistence manager and to
   throw an exception when the object is associated with a different
   persistence manager. In the case of application identity, it is
   unclear what should if the identity already exists. The
   specification might imply that an exception should be thrown. The
   other logical behaviors are to have the object get the persistent
   state associated with the identity or to have the object's in
   memory state become the canonical version of the state for that
   identity.

   Reported: 2004-06-23
   By: rhs

.. PersistenceManager.makePersistent(Object) correctly barfs if
   currentTransaction().begin() has not been called. However fetching
   existing persistent objects and modifying them succeeds without
   calling currentTransaction.begin().

   Reported: 07/08/2004
   By: rhs

.. When using limit in an OQL query and then using the javax.jdo.Query
   API to do setFilter or setOrder, the limit part of the expression
   is dropped silently. Instead, OQL should raise a catchable
   exception that can be converted to a JDOUserException by the jdo
   implementation or correctly handle non top-level range and limit

   Reported: 08/13/2004
   By: ashah

* Closed
