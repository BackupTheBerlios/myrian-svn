/*
 * Copyright (C) 2004 Red Hat, Inc.  All Rights Reserved.
 *
 * This program is Open Source software; you can redistribute it and/or
 * modify it under the terms of the Open Software License version 2.1 as
 * published by the Open Source Initiative.
 *
 * You should have received a copy of the Open Software License along
 * with this program; if not, you may obtain a copy of the Open Software
 * License version 2.1 from http://www.opensource.org/licenses/osl-2.1.php
 * or by writing the Open Source Initiative c/o Lawrence Rosen, Esq.,
 * 3001 King Ranch Road, Ukiah, CA 95482.
 */
PARSER_BEGIN(JDOQLParser)

package com.redhat.persistence.jdo;

import com.redhat.persistence.common.Path;
import com.redhat.persistence.oql.*;
import com.redhat.persistence.metadata.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.*;

class JDOQLParser {

    private JDOQuery m_query = null;
    private Map m_params = null;

    public JDOQLParser() {
        this(new StringReader(""));
    }

    private void configure(JDOQuery query) {
        m_query = query;
    }

    private void configure(Map params) { m_params = params; }

    private void clear() {
        m_query = null;
        m_params = null;
    }

    private JDOQuery getQuery() {
        return m_query;
    }

    void parseImports(JDOQuery q, String s) {
        try {
            configure(q);
            ReInit(new StringReader(s));
            importDeclaration();
        } catch (ParseException pe) {
            throw new RuntimeException(pe);
        } finally {
            clear();
        }
    }

    void parseParameters(JDOQuery q, String s) {
        try {
            configure(q);
            ReInit(new StringReader(s));
            parameterDeclaration();
        } catch (ParseException pe) {
            throw new RuntimeException(pe);
        } finally {
            clear();
        }
    }

    void parseVariables(JDOQuery q, String s) {
        try {
            configure(q);
            ReInit(new StringReader(s));
            variableDeclaration();
        } catch (ParseException pe) {
            throw new RuntimeException(pe);
        } finally {
            clear();
        }
    }

    private Map getParameters() {
        return m_params;
    }

    private Object getParameter(String name) {
        return m_params.get(name);
    }

    Expression filter(JDOQuery q, String s, Map m) {
        try {
            configure(q);
            configure(m);
            ReInit(new StringReader(s));
            return filter();
        } catch (ParseException pe) {
            throw new RuntimeException(pe);
        } finally {
            clear();
        }
    }

    void parseOrdering(JDOQuery q, String s, Map m) {
        try {
            configure(q);
            configure(m);
            ReInit(new StringReader(s));
            ordering();
        } catch (ParseException pe) {
            throw new RuntimeException(pe);
        } finally {
            clear();
        }
    }

    static String parseStringLiteral(String image) {
        StringBuffer result = new StringBuffer(image.length());
        for (int i = 1; i < image.length() - 1; i++) {
            char c = image.charAt(i);
            if (c == '\\') { c = image.charAt(++i); }
            result.append(c);
        }
        return result.toString();
    }

    private static class Name {
        String m_name;
        StringBuffer m_scope = null;

        Name(String name) { m_name = name; }

        String getName() { return m_name; }

        void append(String s) {
            if (m_scope == null) {
                m_scope = new StringBuffer(m_name);
            } else {
                m_scope.append(m_name);
            }
            m_name = s;
        }

        public String toString() {
            return m_scope == null ? m_name : m_scope + m_name;
        }
    }
}

PARSER_END(JDOQLParser)

SKIP : { " " | "\t" | "\n" | "\r" | "\f" }

/* RESERVED WORDS */
TOKEN:
{
  < THIS: "this">
| < BOOLEAN: "boolean">
| < BYTE: "byte">
| < CHAR: "char">
| < SHORT: "short">
| < INT: "int">
| < LONG: "long">
| < FLOAT: "float">
| < DOUBLE: "double">
| < ASCENDING: "ascending" >
| < DESCENDING: "descending" >
| < IMPORT: "import" >
}

/* LITERALS */

TOKEN :
{
  < NULL: "null">
| < TRUE: "true" >
| < FALSE: "false" >
| < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
| < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
| < #OCTAL_LITERAL: "0" (["0"-"7"])* >
| < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
| < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
| < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
| < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
| < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" > 
| < RPAREN: ")" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < EQ: "==" >
| < NEQ: "!=" >
| < GT: ">" >
| < LT: "<" >
| < GTE: ">=" >
| < LTE: "<=" >
| < BOOL_AND: "&" >
| < COND_AND: "&&" >
| < BOOL_OR: "|" >
| < COND_OR: "||" >
| < TILDE: "~" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BANG: "!" >
}


Name name() :
{
  Token t;
  Name n;
}
{
  ( t = <IDENTIFIER> { n = new Name(t.image); }
    ( LOOKAHEAD(2) <DOT> t = <IDENTIFIER> { n.append(t.image); } )* ) {

    return n;
  }
}

Name type() :
{
    Token t;
    Name n;
}
{
    ( t = <BYTE> | t = <CHAR> | t = <SHORT> | t = <INT> | t = <LONG> |
      t = <FLOAT> | t = <DOUBLE> |
      t = <BOOLEAN> ) { return new Name(t.image); }
  | ( n = name() ) { return n; }
}

Object[] declare() :
{
    Object[] tuple;
    Name type;
    Token ident;
}
{
    ( type = type() ) ( ident = <IDENTIFIER> ) {
        return new Object[] { type.toString(), ident.image };
    }
}

void parameterDeclaration() :
{
}
{
    [ parameter() ( LOOKAHEAD(2) <COMMA> parameter() )* [<COMMA>] ] <EOF>
}

void parameter():
{
   Object[] p;
}
{
    p = declare() {
        getQuery().addParameter((String) p[0], (String) p[1]);
    }
}

void variableDeclaration() :
{
}
{
    [ variable() ( LOOKAHEAD(2) <SEMICOLON> variable() )* [<SEMICOLON>] ]
    <EOF>    
}

void variable() :
{
    Object[] v;
}
{
    v = declare() { 
        getQuery().addVariable((String) v[0], (String) v[1]);
    }
}

void importDeclaration() :
{
}
{
    [ importStmt() ( LOOKAHEAD(2) <SEMICOLON> importStmt() )* [<SEMICOLON>] ]
    <EOF>
}

void importStmt() :
{
    Name n;
    boolean star = false;
}
{
    <IMPORT>
    ( ( n = name() ) [ <DOT> <STAR> { star = true; } ] ) {
        if (star) {
            getQuery().addImportedPackage(n.toString());
        } else {
            getQuery().addImportedName(n.getName(), n.toString());
        }
    }
}

void ordering() :
{
}
{
    [ orderSpec() ] [ <COMMA> ] <EOF>
}

void orderSpec() :
{
    Expression e;
    boolean asc;
}
{
    ( e = expression()
      ( <ASCENDING> { asc = true; } | <DESCENDING> { asc = false; } )
      [ LOOKAHEAD(2) <COMMA> orderSpec() ]
    ) {
        getQuery().addOrder(e, asc);
    }
}

Expression filter() :
{
    Expression e = null;
}
{
      [ e = expression() ] <EOF> { return e; }
}

Expression literal() :
{
    Token t;
    Object o;
}
{
    ( <NULL> { o = null; }
    | <TRUE> { o = Boolean.TRUE; }
    | <FALSE> { o = Boolean.FALSE; }
    | t = <CHARACTER_LITERAL> { o = new Character(t.image.charAt(0)); }
    | t = <STRING_LITERAL> { o = parseStringLiteral(t.image); }
    | t = <INTEGER_LITERAL> { o = Integer.valueOf(t.image); }
    | t = <FLOATING_POINT_LITERAL> { o = Double.valueOf(t.image); } ) {

        return new Literal(o);
    }
}

Expression primary() :
{
    Expression expr;
    Token t;
    List args;
    Expression arg;
}
{
    (
          <LPAREN> expr = expression() <RPAREN>
        | expr = literal()
        | <THIS> { expr = new Variable("this"); }

        ( LOOKAHEAD(3) 
          <DOT> t = <IDENTIFIER> <LPAREN> { args = new ArrayList(); }
            [ arg = expression() { args.add(arg); }
              ( <COMMA> arg = expression() { args.add(arg); } )*
            ]
          <RPAREN> { throw new Error("not implemented"); }
        | ( <DOT> t = <IDENTIFIER> ) { expr = new Get(expr, t.image); }
        )*
    )
    { return expr; }
}

Expression postfixExpression() :
{
    Expression p;
    Name n;
}
{
      p = primary() { return p; }
    | n = name() { return Expression.valueOf(Path.get(n.toString())); }
      // XXX need to prefix "this." for some paths
}

Expression unaryExpression() :
{
    Expression e;
}
{
      e = unaryExpressionNotPlusMinus() { return e; }
    | <PLUS> e = unaryExpression() { return e; }
    | <MINUS> e = unaryExpression() { throw new Error("not implemented"); }
}

Expression unaryExpressionNotPlusMinus() :
{
    Expression e;
}
{
      <TILDE> e = unaryExpression() { throw new Error("not implemented"); }
    | <BANG> e = unaryExpression() { return new Not(e); }
    | LOOKAHEAD(castExpression()) e = castExpression() { return e; }
    | e = postfixExpression() { return e; }
}

Expression castExpression() :
{
    Name type;
    Expression e;
}
{
    <LPAREN> type = type() <RPAREN> e = unaryExpression() {
        // XXX implement cast
        return e;
    }
}

Expression multiplicativeExpression() :
{
    Expression expr;
    Expression r;
}
{
    expr = unaryExpression()
    ( ( <STAR> | <SLASH> ) r = unaryExpression()
        { throw new Error("not implemented"); }
    )*
    { return expr; }
}

Expression additiveExpression() :
{
    Expression expr;
    Expression r;
}
{
    expr = multiplicativeExpression()
    ( ( <PLUS> | <MINUS> ) r = multiplicativeExpression() 
        { throw new Error("not implemented"); }
    )*
    { return expr; }
}

Expression relationalExpression() :
{
    Expression expr;
    Expression r;
    Token t;
}
{
    expr = additiveExpression()
    ( ( t = <LT> | t = <GT> | t = <LTE> | t = <GTE> ) r = additiveExpression()
        { expr = new Comparison(expr, r, t.image); }
    )*
    { return expr; }
}

Expression equalityExpression() :
{
    Expression expr;
    Expression r;
    boolean eq;
}
{
    expr = relationalExpression()
    ( ( <EQ> { eq = true; } | <NEQ> { eq = false; } ) 
      r = relationalExpression() {
        expr = new Equals(expr, r);
        if (!eq) { expr = new Not(expr); }
      }
    )*
    { return expr; }
}

Expression andExpression() :
{
    Expression expr;
    Expression r;
}
{
    expr = equalityExpression()
    ( <BOOL_AND> r = equalityExpression() { expr = new And(expr, r); } )*
    { return expr; }
}

Expression inclusiveOrExpression() :
{
    Expression expr;
    Expression r;
}
{
    expr = andExpression() 
    ( <BOOL_OR> r = andExpression() { expr = new Or(expr, r); } )*
    { return expr; }
}

Expression conditionalAndExpression() :
{
    Expression expr;
    Expression r;
}
{
    expr = inclusiveOrExpression()
    ( <COND_AND> r = inclusiveOrExpression() { expr = new And(expr, r); } )*
    { return expr; }
}

Expression conditionalOrExpression() :
{
    Expression expr;
    Expression r;
}
{
    expr = conditionalAndExpression()
    ( <COND_OR> r = conditionalAndExpression() { expr = new Or(expr, r); } )*
    { return expr; }
}

Expression expression() :
{
    Expression e;
}
{
    e = conditionalOrExpression() { return e; }
}
