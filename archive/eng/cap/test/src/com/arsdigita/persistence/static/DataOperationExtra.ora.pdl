//
// Copyright (C) 2002-2004 Red Hat, Inc.  All Rights Reserved.
//
// This program is Open Source software; you can redistribute it and/or
// modify it under the terms of the Open Software License version 2.1 as
// published by the Open Source Initiative.
//
// You should have received a copy of the Open Software License along
// with this program; if not, you may obtain a copy of the Open Software
// License version 2.1 from http://www.opensource.org/licenses/osl-2.1.php
// or by writing the Open Source Initiative c/o Lawrence Rosen, Esq.,
// 3001 King Ranch Road, Ukiah, CA 95482.
model examples;

data operation DataOperationWithPLSQL {
    do {
        begin
          DataOperationProcedure;
        end;
    }
}

data operation DataOperationWithPLSQLAndReturn {
    do {
        begin
          DataOperationFunction;
        end;
    } map {
        returnValue = DataOperationFunction.returnValue;
    }
}

data operation DataOperationWithPLSQLAndArgs {
    do {
        begin
          DataOperationProcedureWithArgs(:priority);
        end;
    }
}


data operation DataOperationProcedureOneArg {
    do {
        begin
          DataOperationProcedureOneArg(:description);
        end;
    }
}

//----------------------------------------------------------------
data operation DataOperationFunction {
    do call {
        :newValue = DataOperationFunction
    } map {
        newValue : VARCHAR(4000);
    }
}

data operation DataOperationProcWithOut {
    do call {
        DataOperationProcWithOut(:newID)
    } map {
        newID : VARCHAR(4000);
    }
}

data operation DataOperationProcWithInOut {
    do call {
        DataOperationProcWithInOut(:oldID, :newID)
    } map {
        oldID : VARCHAR(40);
        newID : VARCHAR(40);
    }
}

data operation DataOperationProcWithInOutInt {
    do call {
        DataOperationProcWithInOutInt(:oldID, :newID)
    } map {
        oldID : INTEGER;
        newID : INTEGER;
    }
}

data operation DataOperationProcWithDates {
    do call {
        DataOperationProcWithDates(:idToUpdate, :oldDate, :newDate)
    } map {
        idToUpdate : INTEGER;
        oldDate : DATE;
        newDate : DATE;
    }
}

data operation DataOperationProcWithTime {
    do call {
        DataOperationProcWithTime(:idToUpdate, :oldDate, :newDate)
    } map {
        idToUpdate : INTEGER;
        oldDate : TIMESTAMP;
        newDate : TIMESTAMP;
    }
}
        

data operation PLSQLWithArbitraryArgsQuery {
     do {
         begin
            PLSQLWithArbitraryArgs(v_arg1 => :arg1, v_arg2 => :arg2, v_arg5 => :arg5);
         end;
     }  
}
