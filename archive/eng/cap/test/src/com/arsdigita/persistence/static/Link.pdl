//
// Copyright (C) 2001-2004 Red Hat, Inc.  All Rights Reserved.
//
// This program is Open Source software; you can redistribute it and/or
// modify it under the terms of the Open Software License version 2.1 as
// published by the Open Source Initiative.
//
// You should have received a copy of the Open Software License along
// with this program; if not, you may obtain a copy of the Open Software
// License version 2.1 from http://www.opensource.org/licenses/osl-2.1.php
// or by writing the Open Source Initiative c/o Lawrence Rosen, Esq.,
// 3001 King Ranch Road, Ukiah, CA 95482.
model linkTest;

object type Article {
    BigInteger id = t_articles.article_id INTEGER;
    String text = t_articles.text CLOB;
    component ArticleImageLink[0..n] images;

    object key (id);
    delete {
        do { delete from t_article_image_map where article_id = :id }
        do { delete from t_articles where article_id = :id }
    }

    retrieve images {
        do {
            select m.article_id, i.image_id, m.caption, i.bytes
            from t_article_image_map m, t_images i
            where m.image_id = i.image_id
            and m.article_id = :id
        } map {
            images.article.id = m.article_id;
            images.image.id = i.image_id;
            images.image.bytes = i.bytes;
            images.caption = m.caption;
        }
    }

    add images {
        do {
            insert into t_article_image_map
            (article_id, image_id, caption)
            values
            (:images.article.id, :images.image.id, :images.caption)
        }
    }
}

object type ArticleImageLink {
    Article[1..1] article =
        join t_article_image_map.article_id to t_articles.article_id;
    Image[1..1] image =
        join t_article_image_map.image_id to t_images.image_id;
    String caption = t_article_image_map.caption VARCHAR(4000);

    object key (image, article);

    insert { }
    add image { }
    add article { }

    update {}
    delete {}
    retrieve all {
        do {
            select a.article_id, a.text, m.caption, i.image_id, i.bytes
            from t_articles a, t_article_image_map m, t_images i
            where a.article_id = m.article_id
            and m.image_id = i.image_id
        } map {
            article.id = a.article_id;
            article.text = a.text;
            image.id = i.image_id;
            image.bytes = i.bytes;
            caption = m.caption;
        }
    }
}

object type Image {
    BigInteger id = t_images.image_id INTEGER;
    byte[] bytes = t_images.bytes BLOB;

    object key (id);


    delete {
        do { delete from t_article_image_map where image_id = :id }
        do { delete from t_images where image_id = :id }
    }

}
