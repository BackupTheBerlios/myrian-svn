- Grep through jdo-1_0_1-spec.txt looking for all occurrences of
  "must" in order to compile an exhaustive list of things that we
  _must_ implement.

- stop using PropertyMap as key. switch to serializable String based
  with transient slots for actual thing. add new PMap constructor ?
  another option is to use defined key order and a CompoundKey. might
  want to wait for metamodel changes, which will provide similar
  functionality

- reverse navigation in jdo implementation objects
  + ssn -> pmi (used in JDOAdapater#getObject)
    + add attribute map to c.r.p session
      (done in change 43257).
    -x- use subclass technique from c.a.p
    -x- add static map from ssn object to pmi
  - pc -> sm (could also be used in setSession, but is less important)
    - can use reflection, but that may not be appropriate depending on
      what the spec says regarding the protected-ness of the field

- The current implementation of C#javaGet(PersistenceCapable,Property)
  relies on reflective method access and a bean-style naming
  convention.  Rewrite this method to use
  StateManager#getXXXField(PersistenceCapable,int,XXX) or some such
  instead.

- First-class Objects vs Second-class Objects
  - how do Collection implementation fit in
  - are PersitenceCapable SCOs using embedded-* the same as components

- integrate pandora/crp collections

- metadata

- implement alphabet soup in PMFI (setConnectionFactoryName)
  - decide on what APIs to support for the jndi retrieved object
  - see spec for when to use jndi versus when to use jdbc url

- decide if something like makeDirty needs to be implemented in c.r.p

- ashah should get cache eviction in c.r.p commitable to PMI#evict can
  be implemented

- serializable query

- add StatementProfiler to engine constructed in PMF

- plan for supporting multithread
  - does it require changes to c.r.p?

- are ascending/descending reserved words in JDO? should the JDOQL
  parser treat them as such?

- proper handling of numeric literals in jdoql

- are a == b == c and a > b > c valid in jdoql

- handling non-short-circuiting boolean operators (& and |) in jdoql
