//
// Copyright (C) 2004 Red Hat, Inc.  All Rights Reserved.
//
// This program is Open Source software; you can redistribute it and/or
// modify it under the terms of the Open Software License version 2.1 as
// published by the Open Source Initiative.
//
// You should have received a copy of the Open Software License along
// with this program; if not, you may obtain a copy of the Open Software
// License version 2.1 from http://www.opensource.org/licenses/osl-2.1.php
// or by writing the Open Source Initiative c/o Lawrence Rosen, Esq.,
// 3001 King Ranch Road, Ukiah, CA 95482.
model com.redhat.persistence.jdo;

object type Department class com.redhat.persistence.jdo.Department
    adapter com.redhat.persistence.jdo.JDOAdapter {

    BigInteger[1..1] id = depts.id INTEGER;
    String[1..1] name = depts.name VARCHAR(200);

    object key (id);
}

query Department$Gen class com.redhat.persistence.PropertyMap
    adapter com.redhat.persistence.pdl.adapters.IdentityAdapter {
    BigInteger id;

    do {
        select nextval('jdotest_seq') as id
    } map {
        id = id;
    }
}

object type Employee class com.redhat.persistence.jdo.Employee
    adapter com.redhat.persistence.jdo.JDOAdapter {

    BigInteger[1..1] id = emps.id INTEGER;
    String[0..1] name = emps.name VARCHAR(200);
    Float[0..1] salary = emps.salary FLOAT;
    Department[0..1] dept = join emps.dept_id to depts.id;
    Address[0..1] address {
        m_street = emps.street;
        m_apt = emps.apt;
        m_city = emps.city;
        m_state = emps.state;
        m_zip = emps.zip;
    };

    object key (id);

    aggressive load(address);

}

nested object type Address class com.redhat.persistence.jdo.Address
    adapter com.redhat.persistence.jdo.JDOAdapter {
    String m_street;
    String m_apt;
    String m_city;
    String m_state;
    String m_zip;
}

query Employee$Gen class com.redhat.persistence.PropertyMap
    adapter com.redhat.persistence.pdl.adapters.IdentityAdapter {

    BigInteger id;
    do {
        select nextval('jdotest_seq') as id
    } map {
        id = id;
    }
}

object type Rolodex class com.redhat.persistence.jdo.Rolodex
    adapter com.redhat.persistence.jdo.JDOAdapter {
    BigInteger id = rolodexes.id;
    Contact[0..n] m_contacts = join rolodexes.id to contacts.rolodex_id {
        m_name = contacts.name;
        m_number = contacts.number;
        object key (m_name);
    };

    object key (id);
}

nested object type Contact class com.redhat.persistence.jdo.Contact
    adapter com.redhat.persistence.jdo.JDOAdapter {
    String[0..1] m_name;
    String[0..1] m_number;
}

query Rolodex$Gen class com.redhat.persistence.PropertyMap
    adapter com.redhat.persistence.pdl.adapters.IdentityAdapter {
    BigInteger id;
    do {
        select nextval('jdotest_seq') as id
    } map {
        id = id;
    }
}


// Pandora

object type Party class com.redhat.persistence.jdo.Party
                  adapter com.redhat.persistence.jdo.JDOAdapter {
    Integer[1..1] id = parties.party_id INTEGER;
    unique String[1..1] email = parties.primary_email VARCHAR(200);

    object key (id);
}

association {
    Party[1..1] container =
        join auxiliary_emails.party_id to parties.party_id;
    component AuxiliaryEmail[0..n] auxiliaryEmails$elements$entries =
        join parties.party_id to auxiliary_emails.party_id;
}

object type AuxiliaryEmail class com.redhat.persistence.jdo.MapEntry
                           adapter com.redhat.persistence.jdo.JDOAdapter {
    Integer[1..1] key = auxiliary_emails.index;
    String[0..1] value = auxiliary_emails.email VARCHAR(200);

    object key (container, key);
}

object type User extends Party class com.redhat.persistence.jdo.User {
    String[1..1] name = users.screen_name VARCHAR(200);

    reference key (users.user_id);
}

object type Group extends Party class com.redhat.persistence.jdo.Group {
    User[0..n] users = join groups.group_id to group_member_map.group_id,
                       join group_member_map.member_id to users.user_id;
    String[1..1] name = groups.name VARCHAR(200);

    reference key (groups.group_id);
}

object type Order class com.redhat.persistence.jdo.Order
                  adapter com.redhat.persistence.jdo.JDOAdapter {
    Integer[1..1] id = orders.order_id INTEGER;
    Party[1..1] party = join orders.party_id to parties.party_id;
    Date[0..1] purchaseDate = orders.purchase_date DATE;

    object key (id);
}

association {
    Order[1..1] order = join items.order_id to orders.order_id;
    component Item[0..n] items = join orders.order_id to items.order_id;
}

object type Item class com.redhat.persistence.jdo.Item
                 adapter com.redhat.persistence.jdo.JDOAdapter {
    Integer[1..1] id = items.id INTEGER;

    object key (id);
}

association {
    Product[0..1] product = join items.product_id to products.id;
    Item[0..n] items = join products.id to items.product_id;
}

object type Product class com.redhat.persistence.jdo.Product
                    adapter com.redhat.persistence.jdo.JDOAdapter {
    Integer[1..1] id = products.id INTEGER;
    String[1..1] name = products.name VARCHAR(200);
    Float[1..1] price = products.price FLOAT; // Use currency instead?
    Picture[0..1] picture = join products.picture_id to pictures.id;

    object key (id);
}

object type Picture class com.redhat.persistence.jdo.Picture
                    adapter com.redhat.persistence.jdo.JDOAdapter {
    Integer[1..1] id = pictures.id INTEGER;
    String[1..1] caption = pictures.caption VARCHAR(200);
    byte[][1..1] content = pictures.content BLOB;
    Integer[0..1] viewings = pictures.viewings INTEGER;

    object key(id);
}


object type Magazine class com.redhat.persistence.jdo.Magazine
                     adapter com.redhat.persistence.jdo.JDOAdapter {

    Integer[1..1] id = magazines.id INTEGER;
    String[1..1] title = magazines.title VARCHAR(200);

    object key(id);
}

object type MagazineIndex class com.redhat.persistence.jdo.MapEntry
                          adapter com.redhat.persistence.jdo.JDOAdapter {

    String[1..1]  key = mag_index.topic VARCHAR(200);
    Integer[1..1] value = mag_index.page_number INTEGER;

    object key(container, key);
}

association {
    Magazine[1..1] container = join mag_index.magazine_id to magazines.id;
    component MagazineIndex[0..n] index$entries = join magazines.id to mag_index.magazine_id;
}

object type DummyCRPMap class com.redhat.persistence.jdo.CRPMap
    adapter com.redhat.persistence.jdo.JDOAdapter {

}
