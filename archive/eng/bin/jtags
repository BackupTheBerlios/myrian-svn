#! /bin/bash
#
# $Id: //eng/persistence/dev/bin/jtags#1 $
# Example:
#   jtags TAGS.ccm /var/vadim/p4checkout/core-platform/dev/src/ /var/vadim/p4checkout/cms/dev/src/
#
# The above invocation tags .java files under core-platform/dev/src
# and cms/dev/src and generates the tags file ./TAGS.ccm.
#
# Abstract:  This Bourne shell script produces an Emacs
#            tags file for Java source code. The tags file
#            contains tags for classes, interfaces, constructors,
#            methods, and variables.
#
# By:        Paul Kinnucan 
#            The MathWorks, Inc.
#	     paulk@mathworks.com
#
# Thanks:    David Lim <david@ndc.com>
#            Michael Mirman <mmirman@mathworks.com>
#            Kent S. Gordon" <kgor@inetspace.com>
#
#       Modified by:  Vadim Nasardinov (vadimn@redhat.com)
# First modified on: 2003-07-25
#     Last modified: $Id: //eng/persistence/dev/bin/jtags#1 $

if [ -z "$2" ]; then
    echo "Usage:"
    echo "   $0 <tags-file> <src-dir> [ <src-dir2> ...]"
    echo ""
    echo "The <tags-file> will be overwritten, if it already exists."
    exit 1;
fi

TAGS=$1
if [ -f "$TAGS" ]; then
    mv "$TAGS" "${TAGS}.bak"
fi

shift 1

# define regexps

capital='A-Z'
letter='a-zA-Z_.'
digit='0-9'
ws='[ \t]'

primitive_type1='\<\(b\(oolean\|yte\)\|char\|double\|float\|int'
primitive_type2='\|long\|short\|void\)\>'
primitive_type="$primitive_type1$primitive_type2"
primitive_type_count=2

primitive_type3='\|long\|short\)\>'
primitive_type_no_void="$primitive_type1$primitive_type3"
primitive_type_no_void_count=2

identifier="\<\([$letter][$letter$digit]*\)\>"
identifier_count=1

package="\<\([a-z][$letter$digit\.]+\.\)*\>"
class_type="\<$package\([$capital][a-zA-Z_$digit]*\)\>"
class_type_count=1

modifier1='\<\(abstract\|const\|final\|native\|'
modifier2='p\(r\(ivate\|otected\)\|ublic\)\|'
modifier3='s\(tatic\|ynchronized\)\|transient\|volatile\)\>'
modifier="$modifier1$modifier2$modifier3"
modifier_count=4

# Class patterns
class1="/^$ws*\<\(class\|interface\)\>$ws*$identifier/\2/"
class2="/^[^.*\/]*\($modifier$ws*\)*\<\(class\|interface\)\>$ws*$identifier/\7/"

# Constructor pattern
constructor="/^$ws*\($modifier$ws*\)*$class_type$ws*(/\7/"



# Pattern for methods that return primitive types, e.g.,
#
#   int[] foo()
#
method1="/^[^.*\/]*$primitive_type$ws*\(\[$ws*\]$ws*\)*$identifier$ws*(/\4/"

# Pattern for methods that return class types, e.g.,
#
#   Foo[] foo()
#
method2="/^[^.*\/]*$class_type$ws*\(\[$ws*\]$ws*\)*$identifier$ws*(/\3/"

# Pattern for matching primitive variable declarations.
var1a=".*$primitive_type_no_void$ws*\(\[$ws*\]$ws*\)*$identifier"
var1b="$ws*\(=\|;\)"
var1="/$var1a$var1b/\4/"

# Pattern for matching user-defined variable declarations.
var2a=".*$class_type$ws*\(\[$ws*\]$ws*\)*$identifier"
var2b="$ws*\(=\|;\)"
var2="/$var2a$var2b/\3/"

# Use find to recurse through the source hierarchy, 
# finding every java source file.
# Use xargs to apply etags to the source files.
# Note that xargs may invoke etags multiple
# times, depending on how many files it can batch
# per invocation. That is why we run etags in
# append (-a) mode.

for srcdir in "$@"; do
    if [ ! -d "$srcdir" ]; then
        echo "Warning: $srcdir not a directory"
    else
        echo "Processing $srcdir"

        echo "Tagging classes and constructors"
        find "$srcdir" \( -name RCS -prune \) -o \( -name CVS -prune \) -o \( -name '*.java' -print \) | xargs  \
        etags  -l none -a -o "$TAGS"  \
        "--regex=$class1" "--regex=$class2"  "--regex=$constructor"  

        echo "Tagging methods"
        find "$srcdir" \( -name RCS -prune \) -o \( -name CVS -prune \) -o \( -name '*.java' -print \) | xargs  \
        etags  -l none -a -o "$TAGS"  \
        "--regex=$method1" "--regex=$method2"

        echo "Tagging variables"
        find "$srcdir" \( -name RCS -prune \) -o \( -name CVS -prune \) -o \( -name '*.java' -print \) | xargs  \
        etags  -l none -a -o "$TAGS"  \
        "--regex=$var1" "--regex=$var2"
    fi
done


# History:
#
# $Log: jtags,v $
# Revision 1.2  2003/07/25 21:47:50  vadim
# Support tagging of multiple directories.
#
# Revision 1.1  2003/07/25 21:16:50  vadim
# Genesis.
#
# Revision 1.1  2002/06/06 02:07:21  vadim
# Putting previously missed files under CVS
#
# Revision 1.11  2001/01/06 05:29:58  paulk
# Add "\." below to the definition of class_type so
# that methods whose return type included a period (e.g, Foo.Bar)
# were tagged:
#
#   class_type="\<\([$capital][a-zA-Z_$digit\.]*\)\>"
#
# Thanks to Charles Rich <rich@merl.com>
#
# Revision 1.10  2000/12/23 04:29:57  paulk
# (1) Added "-l none" to the etags arguments (all four calls) to
# eliminate the additional spurious tags that were coming from etags'
# default java parsing:
#
#     ${etags_dir}etags -l none -a -o ${java_dir}/TAGS \
#
# (2) Added "\/" to the prohibited characters at the start of class2,
# method1 and method2 to prevent comment lines like
#
# // this is a nice interface for catching mice
#
# getting tagged:
#
#     class2="/^[^.*\/]*\($modifier$ws*\)*\<\(class\|interface\)\>$ws*$identifier/\7/"
#
# Thanks to Charles Rich <rich@merl.com>  for these improvements.
#
# Revision 1.9  1999/08/19 10:19:51  paulk
# Added prune clause for RCS.
#
# Revision 1.8  1998/02/19 04:08:24  kinnucan
# More edits to the comments.
#
# Revision 1.7  1998/02/19 03:45:03  kinnucan
# Cleaned up the comments.
#
# Revision 1.6  1998/02/19 03:42:05  kinnucan
# "Kent S. Gordon" <kgor@inetspace.com> contributed the following
# improvements
#
#  - Change some .* expressions to [^.*] to prevent matches
#    in source file comments and functions.
#
#  - Removed . from class_type since declarations should never
#    be for another package.
#
# Thanks Kent.
#
# Revision 1.5  1997/12/03 03:31:29  kinnucan
# Divided tagging process into three passes
# through the source hierarchy to avoid overflowing
# the xargs bugger.
#
# Revision 1.4  1997/10/06 04:48:58  kinnucan
# Replaced existing regular expressions with a new set
# based on those contained in andersl-java-font-lock.el
#
# Revision 1.3  1997/08/26 09:10:44  kinnucan
# Added revision number.
#
# Revision 1.2  1997/08/26 09:02:42  kinnucan
# 1. Exclude RCS directories from tags search.
# 2. Added regular expression for abstract classes.
#
#

# End of jtags script.
