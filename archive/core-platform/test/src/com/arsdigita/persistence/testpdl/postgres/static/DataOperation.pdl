//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model examples;

data operation DataOperationWithPLSQL {
    do {
        select DataOperationProcedure();
    }
}

data operation DataOperationWithPLSQLAndReturn {
    do {
        select DataOperationFunction() as returnValue
    } map {
        returnValue = returnValue;
    }
}

data operation DataOperationWithPLSQLAndArgs {
    do {
        select DataOperationProcedureWithArgs(:priority)
    }
}


data operation DataOperationProcedureOneArg {
    do {
        select DataOperationProcedureOneArg(:description)
    }
}

query DataOperationFunction {
    String newValue;
    do {
        select DataOperationFunction() as newValue
    } map {
        newValue = newValue;
    }
}

query DataOperationProcWithOut {
    String newID;
    Integer oldID;
    do {
        select DataOperationProcWithOut(:oldID) as newID
    } map {
        newID = newID;
        oldID = newID;
    }
}

query DataOperationProcWithInOut {
    Integer oldID;
    String newID;
    do {
        select DataOperationProcWithInOut(:oldID) as newID
    } map {
        newID = newID;
    }
}

query DataOperationProcWithInOutInt {
    INTEGER oldID;
    INTEGER newID;
    do {
        select DataOperationProcWithInOutInt(:oldID) as newID
    } map {
        oldID = newID;
        newID = newID;
    }
}

query DataOperationProcWithDates {
    DATE newDate;
    do {
        select DataOperationProcWithDates(:idToUpdate, :oldDate) as newDate
    } map {
        newDate = newDate;
    }
}


query PLSQLWithArbitraryArgsQuery {
     do {
         select PLSQLWithArbitraryArgs(:arg1, :arg2, :arg3, :arg4, :arg5)
     }  
} 

