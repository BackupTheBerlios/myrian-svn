//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model examples;

data operation DataOperationWithPLSQL {
    do {
        select DataOperationProcedure();
    }
}

data operation DataOperationWithPLSQLAndReturn {
    do {
        select DataOperationFunction() as returnValue
    } map {
        returnValue = returnValue;
    }
}

data operation DataOperationWithPLSQLAndArgs {
    do {
        select DataOperationProcedureWithArgs(:priority)
    }
}


data operation DataOperationProcedureOneArg {
    do {
        select DataOperationProcedureOneArg(:description)
    }
}

//----------------------------------------
data operation DataOperationFunction {
    do call {
        :newValue = DataOperationFunction
    } map {
        newValue : VARCHAR(4000);
    }
}

data operation DataOperationProcWithOut {
    do call {
        DataOperationProcWithOut(:newID)
    } map {
        newID : VARCHAR(4000);
    }
}

data operation DataOperationProcWithInOut {
    do call {
        DataOperationProcWithInOut(:oldID, :newID)
    } map {
        oldID : VARCHAR(40);
        newID : VARCHAR(40);
    }
}

data operation DataOperationProcWithInOutInt {
    do call {
        DataOperationProcWithInOutInt(:oldID, :newID)
    } map {
        oldID : INTEGER;
        newID : INTEGER;
    }
}

data operation DataOperationProcWithDates {
    do call {
        DataOperationProcWithDates(:idToUpdate, :oldDate, :newDate)
    } map {
        idToUpdate : INTEGER;
        oldDate : DATE;
        newDate : DATE;
    }
}

data operation DataOperationProcWithTime {
    do call {
        DataOperationProcWithTime(:idToUpdate, :oldDate, :newDate)
    } map {
        idToUpdate : INTEGER;
        oldDate : TIMESTAMP;
        newDate : TIMESTAMP;
    }
}
        

data operation PLSQLWithArbitraryArgsQuery {
     do {
         select PLSQLWithArbitraryArgs(:arg1, :arg2, null, null, :arg5)
     }  
} 

