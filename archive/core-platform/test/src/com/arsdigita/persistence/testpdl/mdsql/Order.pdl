//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model mdsql;

object type Order {
    BigDecimal id = t_orders.order_id DECIMAL;
    String[1..1] buyer = t_orders.buyer VARCHAR(100);
    String seller = t_orders.seller VARCHAR(100);
    String shippingAddress = t_orders.shipping_address VARCHAR(200);
    composite LineItem[0..n] items = join t_orders.order_id to t_line_items.order_id;
    Date shippingDate = t_orders.shipping_date DATE;
    Boolean hasShipped = t_orders.shipped_p;

    object key (id);

    delete {
        do { delete from t_line_items where order_id = :id }
        do { delete from t_orders where order_id = :id }
    }



}


object type OrderExt extends Order {
    String[1..1]   text = t_orders_ext.text VARCHAR(100);

    reference key (t_orders_ext.order_id);
}


object type LineItem {
    BigDecimal id = t_line_items.item_id DECIMAL;
    Float[1..1] price = t_line_items.price FLOAT;
    String[1..1] name = t_line_items.name VARCHAR(100);
    Order[1..1] order = join t_line_items.order_id to t_orders.order_id;
    Boolean[0..1] inStock = t_line_items.in_stock_p CHAR;

    object key (id);

}


object type OtherItem {
    BigDecimal id = t_other_items.other_id DECIMAL;
    Float[1..1] price = t_other_items.price FLOAT;
    String[1..1] name = t_other_items.name VARCHAR(100);
    Boolean[0..1] inStock = t_other_items.in_stock_p CHAR;

    object key (id);

}



association {
    Order[1..1] order;
    OtherItem[0..n] relatedOtherItems;

    retrieve order {
        do {
            select o.* 
            from t_orders o, t_order_other_item_map m
            where m.other_item_id = :id
            and o.order_id = m.order_id
        } map {
            order.id = order_id;
            order.buyer = buyer;
            order.seller = seller;
            order.shippingAddress = shipping_address;
        }
    }

    retrieve relatedOtherItems {
        do {
            select * 
            from t_other_items o, t_order_other_item_map m
            where m.order_id = :id
            and o.other_id = m.other_item_id
        } map {
            relatedOtherItems.id = o.other_id;
            relatedOtherItems.price = o.price;
            relatedOtherItems.name = o.name;
            relatedOtherItems.inStock = o.in_stock_p;
        }
    }
    

    add order {
        do {
            insert into t_order_other_item_map (order_id, other_item_id)
            values
            (:order.id, :id)
        }
    }

    add relatedOtherItems {
        do {
            insert into t_order_other_item_map (order_id, other_item_id)
            values
            (:id, :relatedOtherItems.id)
        }
    }

    remove order {
        do {
            delete from t_order_other_item_map 
            where order_id = :order.id and other_item_id = :id
        }
    }

    remove relatedOtherItems {
        do {
            delete from t_order_other_item_map 
            where order_id = :id and other_item_id = :relatedOtherItems.id
        }
    }
}

query OrdersMaxPrices {
    do {
        select t_orders.order_id,
               t_orders.buyer,
               t_orders.seller,
               t_orders.shipping_address,
               t_orders.shipping_date,
               max_item_prices.price
        from t_orders,
             (select order_id,
                     max(price) as price
              from t_line_items
              group by order_id) max_item_prices
        where t_orders.order_id = max_item_prices.order_id
    } map {
        orderId = t_orders.order_id;
        buyer = t_orders.buyer;
        seller = t_orders.seller;
        shippingAddress = t_orders.shipping_address;
        shippingDate = t_orders.shipping_date;
        maxPrice = max_item_prices.price;
    }
}

query OrdersNumberOfLineItems {
    do {
        select order_id from t_line_items
    } map {
        order_id = t_line_items.order_id;
    }
}
