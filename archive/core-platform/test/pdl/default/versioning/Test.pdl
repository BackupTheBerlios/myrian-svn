//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model versiontest;

import com.arsdigita.kernel.*;
import com.arsdigita.versioning.*;

object type Datatype extends VersionedACSObject {
  BigInteger       bigInteger = t_versioned_datatypes.j_big_integer INTEGER;
  BigDecimal       bigDecimal = t_versioned_datatypes.j_big_decimal INTEGER;        
  Boolean          boolean = t_versioned_datatypes.j_boolean CHAR(1);
  Byte             byte = t_versioned_datatypes.j_byte INTEGER;
  Character        character = t_versioned_datatypes.j_character CHAR(1);
  Date             date = t_versioned_datatypes.j_date DATE;
  Double           double = t_versioned_datatypes.j_double NUMERIC;
  Float            float = t_versioned_datatypes.j_float FLOAT;
  Integer          integer = t_versioned_datatypes.j_integer INTEGER;
  Long             long = t_versioned_datatypes.j_long INTEGER;
  Short            short = t_versioned_datatypes.j_short INTEGER;
  String           string = t_versioned_datatypes.j_string VARCHAR(4000);
  Blob             blob = t_versioned_datatypes.j_blob BLOB;
  String           clob = t_versioned_datatypes.j_clob CLOB;
  Datatype[0..1]   related = join t_versioned_datatypes.related_id 
                               to t_versioned_datatypes.id;
  Datatype[0..n]   mappedObjects = join t_versioned_datatypes.id 
                                     to t_versioned_map.id,
                                   join t_versioned_map.child_id
                                     to t_versioned_datatypes.id;

  component Datatype [0..1] child = join t_versioned_datatypes.child_id
                                      to t_versioned_datatypes.id;

  // composites relation goes both ways
  component Datatype[0..n] composites = join t_versioned_datatypes.id 
                                     to t_versioned_datatypes.parent_id;

  Datatype[0..1]   parent = join t_versioned_datatypes.parent_id
                              to t_versioned_datatypes.id;
  
  reference key (t_versioned_datatypes.id);
  aggressive load (related.id, parent.id, child.id);

  add composites {}
  remove composites {}
}
