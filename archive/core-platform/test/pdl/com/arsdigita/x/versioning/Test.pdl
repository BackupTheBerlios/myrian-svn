//
// Copyright (C) 2001, 2002 Red Hat Inc. All Rights Reserved.
//
// The contents of this file are subject to the CCM Public
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.redhat.com/licenses/ccmpl.html
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// $Id: //core-platform/dev/test/pdl/com/arsdigita/x/versioning/Test.pdl#1 $ 
// $DateTime: 2003/02/19 22:26:51 $

model x.versiontest;

import com.arsdigita.kernel.*;
import com.arsdigita.x.versioning.*;

object type Datatype extends VersionedACSObject {
  BigInteger       bigInteger = tx_versioned_datatypes.j_big_integer INTEGER;
  BigDecimal       bigDecimal = tx_versioned_datatypes.j_big_decimal INTEGER;        
  Boolean          boolean = tx_versioned_datatypes.j_boolean CHAR(1);
  Byte             byte = tx_versioned_datatypes.j_byte INTEGER;
  Character        character = tx_versioned_datatypes.j_character CHAR(1);
  Date             date = tx_versioned_datatypes.j_date DATE;
  Double           double = tx_versioned_datatypes.j_double NUMERIC;
  Float            float = tx_versioned_datatypes.j_float FLOAT;
  Integer          integer = tx_versioned_datatypes.j_integer INTEGER;
  Long             long = tx_versioned_datatypes.j_long INTEGER;
  Short            short = tx_versioned_datatypes.j_short INTEGER;
  String           string = tx_versioned_datatypes.j_string VARCHAR(4000);
  Blob             blob = tx_versioned_datatypes.j_blob BLOB;
  String           clob = tx_versioned_datatypes.j_clob CLOB;
  Datatype[0..1]   related = join tx_versioned_datatypes.related_id 
                               to tx_versioned_datatypes.id;
  Datatype[0..n]   mappedObjects = join tx_versioned_datatypes.id 
                                     to tx_versioned_map.id,
                                   join tx_versioned_map.child_id
                                     to tx_versioned_datatypes.id;

  component Datatype [0..1] child = join tx_versioned_datatypes.child_id
                                      to tx_versioned_datatypes.id;

  // composites relation goes both ways
  component Datatype[0..n] composites = join tx_versioned_datatypes.id 
                                     to tx_versioned_datatypes.parent_id;

  Datatype[0..1]   parent = join tx_versioned_datatypes.parent_id
                                        to tx_versioned_datatypes.id;
  
  reference key (tx_versioned_datatypes.id);
  aggressive load (related.id, parent.id, child.id);

  add composites {}
  remove composites {}
}
