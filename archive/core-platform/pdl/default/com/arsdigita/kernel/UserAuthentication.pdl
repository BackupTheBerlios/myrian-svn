//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model com.arsdigita.kernel;

object type UserAuthentication {
    BigDecimal id = user_authentication.auth_id;
    String[1..1] loginName = parties.primary_email;
    String[1..1] password = user_authentication.password;
    String salt = user_authentication.salt;
    String passwordQuestion = user_authentication.password_question;
    String passwordAnswer = user_authentication.password_answer;
    User[1..1] user = join user_authentication.user_id to users.user_id;

    object key(id);
    join user_authentication.auth_id to parties.party_id;

    // MDSQL also deletes from parties
    delete {
        do {
            delete from user_authentication where auth_id = :id
        }
    }

    // MDSQL also inserts into parties
    insert {
        do {
            insert into user_authentication
            (auth_id, password, salt, 
            password_question, password_answer, user_id)
            values
            (:id, :password, :salt, 
            :passwordQuestion, :passwordAnswer, :user.id)
        }
    }

    // MDSQL also updates parties
    update {
        do {
            update user_authentication
            set password = :password,
                salt = :salt,
                password_answer = :passwordAnswer,
                password_question = :passwordQuestion,
	        user_id = :user.id
            where auth_id = :id
        }
    }

    add user {}
    remove user {}
}

query UserAuthenticationForLogin {
    BigDecimal id;
    String loginName;
    do {
        select user_authentication.auth_id,
	           parties.primary_email
          from user_authentication, 
	           parties
         where user_authentication.user_id = parties.party_id
    } map {
        id = user_authentication.auth_id;
        loginName = parties.primary_email;
    }
}
