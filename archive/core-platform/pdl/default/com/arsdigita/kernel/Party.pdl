//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model com.arsdigita.kernel;

object type Party extends ACSObject {

    // this is logically an association to PartyEmail, but all we care
    // about in PartyEmail is the string email address, so we just
    // define that attribute directly here.  This helps performance
    // until MDSQL is further optimized.
    String[0..1] primaryEmail = parties.primary_email;

    String[0..1] uri = parties.uri VARCHAR(200);

    reference key (parties.party_id);
}

// This object type is an internal implementation detail -- no one
// should work with it directly.  It exists because parties have
// multiple email addresses, which are strings, but multi-value
// attributes aren't supported, so we need to define a seperate
// type and associate to it.
object type PartyEmail {
    BigDecimal partyID = party_email_map.party_id;
    String[1..1] emailAddress = party_email_map.email_address;
    object key (partyID, emailAddress);

    insert {
      do {
         insert into party_email_map (party_id, email_address)
         values (:partyID, :emailAddress)
      }
    }

    retrieve {
      do {
         select party_id, email_address from party_email_map
         where party_id = :partyID and email_address = :emailAddress
      } map {
         partyID = party_email_map.party_id;
         emailAddress = party_email_map.email_address;
      }
    }

    delete {
      do {
         delete from party_email_map 
         where party_id = :partyID and email_address = :emailAddress
      }
    }
}

association {
    Party[1..1] party;
    composite PartyEmail[0..n] emailAddresses;

    retrieve emailAddresses {
      do {
        select party_id, email_address
        from party_email_map
        where party_id = :id
      } map {
        emailAddresses.partyID = party_email_map.party_id;
        emailAddresses.emailAddress = party_email_map.email_address;
      }
    }

    add emailAddresses {}

    remove emailAddresses {}

    clear emailAddresses {
        do {
            delete from party_email_map where party_id = :id
        }
    }

    add party {}
    remove party {}
    clear party {}
}

