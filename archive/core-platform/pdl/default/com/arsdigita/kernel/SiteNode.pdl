//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model com.arsdigita.kernel;

// SiteNode Object Type Definition
//
// A "site node" is a node in a URL hierarchy that can be mapped
// to an application instance.
//
// @author <a href="mailto:bquinn@arsdigita.com">Bryan Quinn</a>
// @version "$Id: //core-platform/dev/pdl/default/com/arsdigita/kernel/SiteNode.pdl#1 $" 
//

object type SiteNode extends ACSObject {
    String name = site_nodes.name;
    String url = site_nodes.url;
    
    // If true, it is legal to create child nodes. 
    Boolean[1..1] isDirectory = site_nodes.directory_p;

    // If true, URLs that are logical children of this node should
    // be mapped to this node, e.g. "www.arsdigita.com/news/item123" 
    // would be mapped to this node still.
    Boolean[1..1] isPattern = site_nodes.pattern_p;

    SiteNode[0..1] parent = join site_nodes.parent_id to site_nodes.node_id;

    composite SiteNode[0..n] children =
        join site_nodes.parent_id to site_nodes.node_id;

    PackageInstance[0..1] mountedObject =
        join site_nodes.object_id to apm_packages.package_id;

    Stylesheet[0..n] defaultStyle = join site_nodes.node_id
                                      to acs_stylesheet_node_map.node_id,
                                    join acs_stylesheet_node_map.stylesheet_id
                                      to acs_stylesheets.stylesheet_id;

    reference key ( site_nodes.node_id );
}

query rootSiteNode {
    do {
        SELECT sn.node_id, sn.parent_id,
        sn.name, sn.url, sn.directory_p, sn.pattern_p
        FROM site_nodes sn
        WHERE sn.parent_id is null
        AND sn.name is null
    } map {
        id = sn.node_id;
        name = sn.name;
        url = sn.url;
        isDirectory = sn.directory_p;
        isPattern = sn.pattern_p;
    }
}

query allSiteNodes {
    do {
        SELECT sn.node_id, sn.parent_id, 
        sn.name, sn.url, sn.directory_p, sn.pattern_p
        FROM site_nodes sn
    } map {
        id = sn.node_id;
        name = sn.name;
        url = sn.url;
        isDirectory = sn.directory_p;
        isPattern = sn.pattern_p;
    }
}

query siteNodeDescendants {
    do {
        SELECT sn.node_id
        FROM site_nodes sn
        CONNECT BY sn.parent_id = PRIOR sn.node_id
        START WITH sn.node_id = :node_id
    } map {
        id = sn.node_id;
    }
}
