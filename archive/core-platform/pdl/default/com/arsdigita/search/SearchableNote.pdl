//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model com.arsdigita.search;

import com.arsdigita.kernel.*;

// This object used for testing search.  It is based on the notes application.


object type SearchableNote extends ACSObject {
    String[1..1]     title = searchable_notes.title VARCHAR(255);
    String[0..1]     body = searchable_notes.body VARCHAR(4000);
    Date[1..1]       creationDate = searchable_notes.creation_date TIMESTAMP;
    Date[1..1]       lastModified = searchable_notes.last_modified TIMESTAMP;

    reference key (searchable_notes.note_id);

    // being left so it can default to sysdate...this should be moved
    // in to the java code or PDL should be extended to allow this
    insert {
    super;
        do {
            insert into searchable_notes
            (note_id, title, body, creation_date, last_modified)
            values
            (:id, :title, :body, sysdate, sysdate)
	}
    }
}

query SearchableNotesRetrieveAll {
    BigDecimal id;
    String title;
    String body;
    BigDecimal categoryID;
    String categoryName;
    Date creationDate;
    Date lastModified;
    BigDecimal noteNum;
        do {
            select n.note_id, m.category_id, m.name, n.title, n.body, 
                   n.creation_date, n.last_modified, 
	           n.note_rownum
            from (select notes.*, rownum as note_rownum from searchable_notes) n,
                  (select m.*, name from note_category_map m,  note_categories c
                    where c.category_id=m.category_id) m
            where n.note_id = m.note_id(+)
	} map {
            id = n.note_id;
            title = n.title;
            body = n.body;
            categoryID = m.category_id;
            categoryName = m.name;
            creationDate = n.creation_date;
            lastModified = n.last_modified;
	    noteNum = n.note_rownum;
	}
}


// Following returns a SearchableNote by applying a filter
query searchableNoteRetrieve {
    BigDecimal id;
    String title;
    String body;
    Date creationDate;
    Date lastModified;
   do {
    select n.note_id, n.title, n.body, n.creation_date, n.last_modified
    from
      searchable_notes n
    } map {
      id = n.note_id;
      title = n.title;
      body = n.body;
      creationDate = n.creation_date;
      lastModified = n.last_modified;
    }
}



