//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

//
// Abstract Place type
//
// @author <a href="mailto:yon@arsdigita.com">yon@arsdigita.com</a>
// @version $Id: //core-platform/dev/pdl/default/com/arsdigita/places/Place.pdl#1 $ by $Author: randyg $, $DateTime: 2002/08/02 16:40:10 $
//

model com.arsdigita.places;

import com.arsdigita.kernel.*;

object type Place extends ACSObject {
    String[1..1] name = places.place_name;
    Double[0..1] latitude = places.latitude;
    Double[0..1] longitude = places.longitude;

    reference key (places.place_id);
}

// Place Hierarchy Association
association {
    Place[0..1] parent;
    Place[0..n] children;

    retrieve parent {
        do {
            select places.place_id,
                   places.place_name,
                   places.latitude,
                   places.longitude
            from place_hierarchy,
                 places
            where place_hierarchy.child_id = :id
            and place_hierarchy.parent_id = places.place_id 
        } map {
            parent.id = places.place_id;
            parent.name = places.place_name;
            parent.latitude = places.latitude;
            parent.longitude = places.longitude;
        }
    }

    retrieve children {
        do {
            select places.place_id,
                   places.place_name,
                   places.latitude,
                   places.longitude
            from place_hierarchy,
                 places
            where place_hierarchy.parent_id = :id
            and place_hierarchy.child_id = places.place_id 
        } map {
            children.id = places.place_id;
            children.name = places.place_name;
            children.latitude = places.latitude;
            children.longitude = places.longitude;
        }
    }

    add parent {
        do {
            insert into place_hierarchy
            (parent_id, child_id)
            values
            (:parent.id, :id)
        }
    }

    add children {
        do {
            insert into place_hierarchy
            (parent_id, child_id)
            values
            (:id, :children.id)
        }
    }

    remove parent {
        do {
            delete from place_hierarchy
            where parent_id = :parent.id
        }
    }

    remove children {
        do {
            delete from place_hierarchy
            where child_id = :children.id
            and parent_id = :id
        }
    }

    clear parent {
        do {
            delete from place_hierarchy
            where parent_id = :id
        }
    }

    clear children {
        do {
            delete from place_hierarchy
            where child_id = :id
        }
    }
}
