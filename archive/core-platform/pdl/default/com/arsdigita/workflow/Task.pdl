//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model com.arsdigita.workflow.simple;

import com.arsdigita.kernel.*;

object type Task extends ACSObject {

    String[1..1]     label = cw_tasks.label VARCHAR(200);
    String[1..1]     description = cw_tasks.description VARCHAR(4000);
    String[1..1]     isActive = cw_tasks.is_active CHAR(1);
    BigDecimal[0..1] parentTaskID = cw_tasks.parent_task_id INTEGER;
    String[1..1]     taskState = cw_tasks.task_state VARCHAR(16);
    component TaskComment[0..n] comments = 
              join cw_tasks.task_id to cw_task_comments.task_id;
	
    reference key (cw_tasks.task_id);



   // delete all of dependency list , delete other dependency 
   // list that has this task def.  The delete may fail
   // if there other foreign key references on task
   // TODO: delete dependencies too.
    delete {
        do {
            delete from cw_task_comments
            where task_id = :id
        }	
        
        do {
            delete from cw_tasks
            where  task_id = :id
        }
        super;
    }
}

association {
    Task[1..1] task = join cw_tasks.task_id 
                        to cw_task_listeners.listener_task_id,
                      join cw_task_listeners.task_id
                        to cw_tasks.task_id;
    Task[0..n] taskFinishedListeners = join cw_tasks.task_id 
                                         to cw_task_listeners.task_id, 
                                       join cw_task_listeners.listener_task_id
                                         to cw_tasks.task_id;

    add task {}
    retrieve task {}
    clear task {}

    retrieve taskFinishedListeners {
        do {
	    select cw_task_listeners.listener_task_id ,
                   acs_objects.object_type 
            from   cw_task_listeners ,
                   acs_objects
            where  cw_task_listeners.task_id = :id
            and    acs_objects.object_id = cw_task_listeners.listener_task_id
        } map {
            taskFinishedListeners.id               = cw_task_listeners.listener_task_id;
            taskFinishedListeners.objectType       = acs_objects.object_type;
        }
    }

    add taskFinishedListeners {
	do {
            insert into cw_task_listeners (
                task_id ,
                listener_task_id
            ) values (
	        :id  ,
                :taskFinishedListeners.id
	    )
        }
    }

    remove taskFinishedListeners {
        do {
            delete from cw_task_listeners
            where  task_id = :id 
            and    listener_task_id = :taskFinishedListeners.id
        }
    }	

    clear  taskFinishedListeners {
	do {
	    delete from cw_task_listeners
            where  task_id = :id
      	}
    }
}   

association {
    Task[1..1] targetTask = join cw_tasks.task_id 
                              to cw_task_dependencies.task_id,
                            join cw_task_dependencies.dependent_task_id
                              to cw_tasks.task_id;

    Task[0..n] dependsOn = join cw_tasks.task_id 
                              to cw_task_dependencies.dependent_task_id,
                            join cw_task_dependencies.task_id
                              to cw_tasks.task_id;

    retrieve dependsOn {
        do {
           select cw_tasks.label,
                  cw_tasks.description,
                  cw_tasks.is_active,
                  cw_tasks.parent_task_id,
                  acs_objects.object_id,
                  acs_objects.object_type
           from  cw_task_dependencies ,
                 cw_tasks  ,
                 acs_objects
           where cw_task_dependencies.task_id = :id 
           and   cw_tasks.task_id  = 
	         cw_task_dependencies.dependent_task_id               
           and   acs_objects.object_id = cw_tasks.task_id
        } map {
           dependsOn.description                 = cw_tasks.description;
           dependsOn.isActive                    = cw_tasks.is_active;
           dependsOn.parentTaskID                = cw_tasks.parent_task_id;
           dependsOn.label                       = cw_tasks.label;
           dependsOn.objectType                  = cw_tasks.object_type;
           dependsOn.id                          = acs_objects.object_id;
        }
    }

    add dependsOn {
        do {
            insert into cw_task_dependencies (
                task_id ,
                dependent_task_id
            ) values (
                :id ,
                :dependsOn.id
            )
       }            
    }

    remove dependsOn {
        do {
            delete from cw_task_dependencies 
            where task_id = :id
            and   dependent_task_id = :dependsOn.id
        }
    }

    clear dependsOn {
        do {
            delete from cw_task_dependencies 
            where task_def_id = :id
        }
    }
}

query getTasks {
    BigDecimal taskId;
    BigDecimal taskParentId;
    String taskLabel;
    String taskDescription;

    do {
        select cw_tasks.task_id,
               cw_tasks.parent_task_id,
               cw_tasks.label,
               cw_tasks.description,
               acs_objects.object_type
        from   cw_tasks,
               acs_objects
        where 
               acs_objects.object_id = 
                        cw_tasks.task_id
    } map {
        taskId = cw_tasks.task_id;
        taskParentId = cw_tasks.parent_task_id;
        taskLabel = cw_tasks.label;
        taskDescription = cw_tasks.description;
    }
}
