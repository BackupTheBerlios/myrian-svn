//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model com.arsdigita.search;

// Object SearchContent is used to allow updating the search-content table, (i.e.
// the table that contains the content to be searched).  This object is used in
// the SearchableObserver class to update the search-content table when objects
// of type Searchable change.

object type SearchContent {
  BigDecimal id;
  String     object_type;
  String     link_text;
  String     url_stub;
  String     summary;
  String[0..1] xml_content;  // Really a CLOB
  Blob[0..1] raw_content;
  String     language;

  object key (id);

  retrieve {
    do {
    select object_type, link_text, url_stub, summary, xml_content, raw_content, language
    from
      search_content
    where
      object_id = :id
    } map {
        object_type = search_content.object_type;
        link_text = search_content.link_text;
        url_stub = search_content.url_stub;
        summary = search_content.summary;
        xml_content = search_content.xml_content;
        raw_content = search_content.raw_content;
        language = search_content.language;
    }
  }

  insert {
    do {
    insert into search_content (
        object_id, object_type, link_text, url_stub, summary, xml_content, raw_content, language
    ) values (
        :id, :object_type, :link_text, :url_stub, :summary, :xml_content, :raw_content, :language
    )
    } map {
        xml_content: CLOB;
        raw_content: BLOB;
    }    
  }

  update {
    do {
    update search_content set 
        object_type = :object_type,
        link_text = :link_text,
        url_stub = :url_stub,
        summary = :summary,
        xml_content = :xml_content,
        raw_content = :raw_content,
        language = :language
    where object_id = :id
    } map {
        xml_content: CLOB;
        raw_content: BLOB;
    }
  }

  delete {
    do {
    delete from search_content
      where object_id = :id
    }
  }

}

// Following returns the search content for an object
query searchContentForObject {
   do {
    select object_id, object_type, link_text, url_stub, summary, xml_content, raw_content, language
    from
      search_content
    } map {
        id = search_content.object_id;     
        object_type = search_content.object_type;
        link_text = search_content.link_text;
        url_stub = search_content.url_stub;
        summary = search_content.summary;
        xml_content = search_content.xml_content;
        raw_content = search_content.raw_content;
        language = search_content.language;
    }
}
