//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

// This file contains the entire data object model for the 
// com.arsdigita.kernel.permissions package

model com.arsdigita.kernel.permissions;

import com.arsdigita.kernel.*;

//
// Permission
//
object type Permission {
    BigDecimal[1..1] objectId;
    BigDecimal[1..1] partyId;
    String[1..1]     privilege;

    ACSObject[1..1]  object;
    Party[1..1]      party;

    User[0..1]       creationUser;
    Date[1..1]       creationDate;
    String[0..1]     creationIP;

    object key (objectId, partyId, privilege);

    retrieve {
        do {
            select acs_permissions.object_id,
                   acs_permissions.grantee_id,
                   acs_permissions.privilege,
                   acs_permissions.creation_date,
                   acs_permissions.creation_ip
              from acs_permissions
             where acs_permissions.object_id = :objectId
               and acs_permissions.grantee_id = :partyId
               and acs_permissions.privilege = :privilege
        } map {
            objectId = acs_permissions.object_id;
            partyId = acs_permissions.grantee_id;
            privilege = acs_permissions.privilege;
            creationDate = acs_permissions.creation_date;
            creationIP = acs_permissions.creation_ip;
        }
    }

    retrieve all {
        do {
            select acs_permissions.object_id,
                   acs_permissions.grantee_id,
                   acs_permissions.privilege,
                   acs_permissions.creation_date,
                   acs_permissions.creation_ip
            from acs_permissions
        } map {
            objectId = acs_permissions.object_id;
            partyId = acs_permissions.grantee_id;
            privilege = acs_permissions.privilege;
            creationDate = acs_permissions.creation_date;
            creationIP = acs_permissions.creation_ip;
        }
    }

    insert {
        do {
            insert into acs_permissions
            (object_id, grantee_id, privilege, 
             creation_user, creation_date, creation_ip)
            values
            (:objectId, :partyId, :privilege, 
             :creationUser.id, :creationDate, :creationIP)
        }
    }

                                        
    update {}


    delete {
        do {
            delete from acs_permissions
             where object_id = :objectId
               and grantee_id = :partyId
               and privilege = :privilege
        }
    }    

  retrieve creationUser {
        do {
            select users.user_id, 
	               users.screen_name,
	               parties.uri, acs_objects.object_type
              from users, parties, acs_objects, acs_permissions
             where parties.party_id = users.user_id
	           and acs_objects.object_id = parties.party_id
                   and acs_permissions.creation_user = users.user_id
                   and acs_permissions.object_id = :objectId
                   and acs_permissions.party_id = :partyId
                   and acs_permissions.privilege_id = :privilege
        } map {
            creationUser.id = users.user_id;
            creationUser.screenName = users.screen_name;
            creationUser.uri = parties.uri;
            creationUser.objectType = acs_objects.object_type;
        }
  }

  add creationUser {}
  remove creationUser {}

}

// query that is encapsulated by ObjectPermissionCollection.
// This is one nasty query that includes display information about
// the grantee, which may be a user or group (hence the union).
query ObjectPermissionCollection {
    do {
        select acs_permissions.privilege,
               decode(acs_permissions.object_id, 
                      :objectID, 0, 1) as inherited_p,
               acs_permissions.grantee_id,
               parties.user_p,
               parties.name,
               parties.primary_email,
               parties.given_name,
               parties.family_name,
               parties.name_id
        from acs_permissions,
             (select groups.group_id as party_id,
                     0 as user_p,
                     groups.name as name,
                     parties.primary_email as primary_email,
                     '' as given_name,
                     '' as family_name,
                     0 as name_id
              from groups, parties
              where groups.group_id = parties.party_id) parties
        where acs_permissions.object_id in (
                  select implied_context_id 
                  from granted_trans_context_map c 
                  where object_id =:objectID)
          and acs_permissions.grantee_id = parties.party_id
        UNION ALL
        select acs_permissions.privilege,
               decode(acs_permissions.object_id, 
                      :objectID, 0, 1) as inherited_p,
               acs_permissions.grantee_id,
               parties.user_p,
               parties.name,
               parties.primary_email,
               parties.given_name,
               parties.family_name,
               parties.name_id
        from acs_permissions,
             (select users.user_id as party_id,
                     1 as user_p,
                     '' as name,
                     parties.primary_email as primary_email,
                     person_names.given_name as given_name,
                     person_names.family_name as family_name,
                     users.name_id
              from users, parties, person_names
              where users.user_id = parties.party_id
                and users.name_id = person_names.name_id) parties
        where acs_permissions.object_id in (
                  select implied_context_id 
                  from granted_trans_context_map 
                  where object_id = :objectID)
          and acs_permissions.grantee_id = parties.party_id
    } map {
        privilege = acs_permissions.privilege;
        isInherited = inherited_p;
        granteeID = acs_permissions.grantee_id;
        granteeIsUser = parties.user_p;
        granteeName = parties.name;
        granteeEmail = parties.primary_email;
        granteeGivenName = parties.given_name;
        granteeFamilyName = parties.family_name;
        granteeNameID = parties.name_id;        
    }
}


// query that is encapsulated by ObjectDirectPermissionCollection.
// This is one nasty query that includes display information about
// the grantee, which may be a user or group (hence the union).
query ObjectDirectPermissionCollection {
    do {
        select acs_permissions.privilege,
               0 as inherited_p,
               acs_permissions.grantee_id,
               parties.user_p,
               parties.name,
               parties.primary_email,
               parties.given_name,
               parties.family_name,
               parties.name_id
        from acs_permissions,
             (select groups.group_id as party_id,
                     0 as user_p,
                     groups.name as name,
                     parties.primary_email as primary_email,
                     '' as given_name,
                     '' as family_name,
                     0 as name_id
              from groups, parties
              where groups.group_id = parties.party_id) parties
        where acs_permissions.object_id = :objectID
          and acs_permissions.grantee_id = parties.party_id
        UNION ALL
        select acs_permissions.privilege,
               0 as inherited_p,
               acs_permissions.grantee_id,
               parties.user_p,
               parties.name,
               parties.primary_email,
               parties.given_name,
               parties.family_name,
               parties.name_id
        from acs_permissions,
             (select users.user_id as party_id,
                     1 as user_p,
                     '' as name,
                     parties.primary_email as primary_email,
                     person_names.given_name as given_name,
                     person_names.family_name as family_name,
                     users.name_id
              from users, parties, person_names
              where users.user_id = parties.party_id
                and users.name_id = person_names.name_id) parties
        where acs_permissions.object_id = :objectID
          and acs_permissions.grantee_id = parties.party_id
    } map {
        privilege = acs_permissions.privilege;
        isInherited = inherited_p;
        granteeID = acs_permissions.grantee_id;
        granteeIsUser = parties.user_p;
        granteeName = parties.name;
        granteeEmail = parties.primary_email;
        granteeGivenName = parties.given_name;
        granteeFamilyName = parties.family_name;
        granteeNameID = parties.name_id;        
    }
}



query PermissionFilterQuery {
    do {
        select oc.object_id 
        from object_context oc
        where (context_id in
                   (select c.object_id 
                      from granted_context_non_leaf_map c, 
                           acs_permissions p 
                     where c.implied_context_id=p.object_id 
                       and (p.grantee_id in :partyList or 
                            p.grantee_id in (select group_id 
                                             from group_member_trans_map
                                             where member_id in :partyList)) 
                        and p.privilege in :privilegeList
                   )
               or oc.object_id in 
                   (select p.object_id
                      from acs_permissions p
                     where (p.grantee_id in :partyList or 
                            p.grantee_id in (select group_id
                                             from group_member_trans_map
                                             where member_id in :partyList))
                        and p.privilege in :privilegeList
                   )
              )
    } map {
        objectID=oc.object_id;
    }
}

query GroupPermissionFilterQuery {
    do {
        select oc.object_id 
        from object_context oc
        where (context_id in
                   (select c.object_id 
                      from granted_context_non_leaf_map c, 
                           acs_permissions p 
                     where c.implied_context_id=p.object_id 
                       and p.grantee_id in (select group_id 
                                            from group_subgroup_trans_map
                                            where subgroup_id in :partyList) 
                        and p.privilege in :privilegeList
                   )
               or oc.object_id in 
                   (select p.object_id
                      from acs_permissions p
                     where p.grantee_id in (select group_id
                                            from group_subgroup_trans_map
                                            where subgroup_id in :partyList)
                        and p.privilege in :privilegeList
                   )
              )
    } map {
        objectID=oc.object_id;
    }
}

// Three cases for grantee:
//  - User
//  - Party
//  - Site-wide admin

query ObjectPermissionFilterQuery {
    do {
        select member_id
          from party_member_trans_map m,
               (select p.grantee_id 
                  from granted_context_non_leaf_map c,
                       acs_permissions p
                 where c.object_id = p.object_id
                   and c.object_id = :objectID
                   and p.privilege in :privilegeList
                 union all
                select p.grantee_id
                  from acs_permissions p
                 where p.object_id = :objectID
                   and p.privilege in :privilegeList) g
         where m.party_id = g.grantee_id
         union all
        select grantee_id
          from acs_permissions
         where object_id = 0
           and privilege in :privilegeList
    } map {
        granteeID = p.grantee_id;
    }
}

query CheckPermissionForUser {
    do {
        select 1 as permission_p
        from object_context
        where object_id=:objectID
          and (context_id in (
                   select c.object_id 
                     from granted_context_non_leaf_map c, 
                          acs_permissions p 
                    where c.implied_context_id=p.object_id 
                      and (  p.grantee_id in :partyList or 
                             p.grantee_id in
                                (select group_id 
                                   from group_member_trans_map
                                  where member_id in :partyList)
                          )
                      and p.privilege in :privilegeList
                  )
               or :objectID in (
                    select p.object_id
                      from acs_permissions p
                     where (  p.grantee_id in :partyList or 
                              p.grantee_id in
                                  (select group_id
                                     from group_member_trans_map
                                    where member_id in :partyList)
                           )
                       and p.privilege in :privilegeList
                  )
              )
    } map {
        hasPermission = permission_p;
    }
}

query CheckPermissionForGroup {
    do {
        select 1 as permission_p
        from object_context
        where object_id=:objectID
          and (context_id in (
                   select c.object_id 
                     from granted_context_non_leaf_map c, 
                          acs_permissions p 
                    where c.implied_context_id=p.object_id 
                      and p.grantee_id in
                                (select group_id 
                                   from group_subgroup_trans_map
                                  where subgroup_id in :partyList)
                      and p.privilege in :privilegeList
                  )
               or :objectID in (
                    select p.object_id
                      from acs_permissions p
                     where p.grantee_id in
                                  (select group_id
                                     from group_subgroup_trans_map
                                    where subgroup_id in :partyList)
                       and p.privilege in :privilegeList
                  )
              )
    } map {
        hasPermission = permission_p;
    }
}

query CheckUninheritedPermissionForUser {
    do {
        select 1 as permission_p from dual
        where exists (
            select 1
            from  acs_permissions
            where acs_permissions.object_id = :objectID
              and (acs_permissions.grantee_id in :partyList
                   or acs_permissions.grantee_id in (
                          select group_id
                          from group_member_trans_map
                          where member_id in :partyList
                   ))
              and (acs_permissions.privilege in :privilegeList)
        )
    } map {
        hasPermission = permission_p;
    }
}

query CheckUninheritedPermissionForGroup {
    do {
        select 1 as permission_p from dual
        where exists (
            select 1
            from  acs_permissions
            where acs_permissions.object_id = :objectID
              and (acs_permissions.grantee_id in (
                          select group_id
                          from group_subgroup_trans_map
                          where subgroup_id in :partyList
                   ))
              and (acs_permissions.privilege in :privilegeList)
        )
    } map {
        hasPermission = permission_p;
    }
}

query CheckDirectGrant {
    do {
        select 1 as permission_p from dual
        where exists (
            select 1
            from acs_permissions
            where acs_permissions.grantee_id = :partyID
              and acs_permissions.object_id = :objectID
              and acs_permissions.privilege in :privileges
        )
    } map {
        hasPermission = permission_p;
    }
}

data operation RevokePartyPermissions {
    do {
        delete from acs_permissions
        where grantee_id = :partyID
    }       
}

query PrivilegesForUser {
    do {
          select acs_permissions.privilege
            from acs_permissions
           where (acs_permissions.grantee_id = :partyID
                  or acs_permissions.grantee_id in (
                          select group_id
                          from group_member_trans_map
                          where member_id = :partyID
                  ))
             and acs_permissions.object_id = :objectID
          UNION
          select acs_permissions.privilege
            from acs_permissions, 
                 object_context oc, 
                 granted_trans_context_index map
           where oc.object_id = :objectID
             and oc.context_id = map.object_id
             and map.implied_context_id = acs_permissions.object_id
             and (acs_permissions.grantee_id = :partyID
                   or acs_permissions.grantee_id in (
                          select group_id
                          from group_member_trans_map
                          where member_id = :partyID
                  ))
    } map {
        privilege = acs_permissions.privilege;
    }
}

query PrivilegesForGroup {
    do {
          select acs_permissions.privilege
            from acs_permissions
           where acs_permissions.grantee_id in (
                          select group_id
                          from group_subgroup_trans_map
                          where subgroup_id = :partyID
                 )
             and acs_permissions.object_id = :objectID
          UNION
          select acs_permissions.privilege
            from acs_permissions, 
                 object_context oc, 
                 granted_trans_context_index map
           where oc.object_id = :objectID
             and oc.context_id = map.object_id
             and map.implied_context_id = acs_permissions.object_id
             and acs_permissions.grantee_id in (
                          select group_id
                          from group_subgroup_trans_map
                          where subgroup_id = :partyID
                 )
    } map {
        privilege = acs_permissions.privilege;
    }
}




//
// Privilege
//
object type Privilege {
    String privilege = acs_privileges.privilege VARCHAR(100);

    object key (privilege);

    retrieve {
        do {
            select acs_privileges.privilege
              from acs_privileges
             where acs_privileges.privilege = :privilege
        } map {
            privilege = acs_privileges.privilege;
        }
    }

    retrieve all {
        do {
            select acs_privileges.privilege
              from acs_privileges
        } map {
            privilege = acs_privileges.privilege;
        }
    }

    insert {
        do {
            insert into acs_privileges
            (privilege)
            values
            (:privilege)
        }
    }   

    // there are no properties to update right now
    update {
    }

    delete {
        do { delete from acs_privileges where privilege = :privilege }
    }

}    

//
// ObjectContext
//
object type ObjectContext {
    BigDecimal[1..1] objectId;

    ACSObject[1..1] object;
    ACSObject[0..1] context;

    object key (objectId);

    retrieve {
        do {
            select object_context.object_id
              from object_context
             where object_context.object_id = :objectId
        } map {
            objectId = object_context.object_id;
        }
    }

    insert {
        do {
            insert into object_context
            (object_id, context_id)
            values
            (:objectId, :context.id)
        }
    }    

    update {
        do {
            update object_context
               set context_id = :context.id
             where object_id = :objectId
        }
    }

    delete {
        do { delete from object_context where object_id = :objectId }
    }

    retrieve object {
        do {
            select acs_objects.object_id,
                   acs_objects.object_type
              from acs_objects
             where object_id = :objectId
        } map {
            object.id = acs_objects.object_id;
            object.objectType = acs_objects.object_type;
        }
    }

    retrieve context {
        do {
            select acs_objects.object_id,
                   acs_objects.object_type
              from acs_objects, object_context
             where acs_objects.object_id = object_context.context_id
               and object_context.object_id = :objectId
        } map {
            context.id = acs_objects.object_id;
            context.objectType = acs_objects.object_type;
        }
    }

    add context {
    }

    remove context {
         do {
            update object_context
               set context_id = null
             where object_id = :objectId
        }
   }
            
}

object type ParameterizedPrivilege {
    String[1..1] basePrivilege = parameterized_privileges.base_privilege;
    String[1..1] paramKey = parameterized_privileges.param_key;
    String[0..1] paramName = parameterized_privileges.param_name;

    object key (paramKey, basePrivilege);

    insert {
        do {
            insert into parameterized_privileges
            (base_privilege, param_key, param_name)
            values
            (:basePrivilege, :paramKey, :paramName)
        }
    }

    update {
        do {
            update parameterized_privileges
            set base_privilege = :basePrivilege,
            param_key = :paramKey,
            param_name = :paramName            
        }
    }

    delete {
        do {
            delete from parameterized_privileges
            where param_key = :paramKey
            and base_privilege = :basePrivilege
        }
    }

    retrieve {
        do {
            select base_privilege, param_key, param_name
            from parameterized_privileges
            where base_privilege = :basePrivilege
              and param_key = :paramKey
        } map {
            basePrivilege = parameterized_privileges.base_privilege;
            paramKey = parameterized_privileges.param_key;
            paramName = parameterized_privileges.param_name;
        }
    }

    retrieve all {
        do {
            select base_privilege, param_key, param_name
            from parameterized_privileges
        } map {
            basePrivilege = parameterized_privileges.base_privilege;
            paramKey = parameterized_privileges.param_key;
            paramName = parameterized_privileges.param_name;
        }
    }
}
