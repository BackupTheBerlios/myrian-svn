//
// Copyright (C) 2001-2004 Red Hat Inc. All Rights Reserved.
//
// The contents of this file are subject to the Open Software License v2.1
// (the "License"); you may not use this file except in compliance with the
// License. You may obtain a copy of the License at
// http://rhea.redhat.com/licenses/osl2.1.html.
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//
// $Id: //core-platform/dev/pdl/com/arsdigita/kernel/SiteNode.pdl#8 $
// $DateTime: 2004/03/30 17:47:27 $
model com.arsdigita.kernel;

// SiteNode Object Type Definition
//
// A "site node" is a node in a URL hierarchy that can be mapped
// to an application instance.
//
// @version "$Id: //core-platform/dev/pdl/com/arsdigita/kernel/SiteNode.pdl#8 $"
//

object type SiteNode extends ACSObject {
    String name = site_nodes.name VARCHAR(100);
    String url = site_nodes.url VARCHAR(3000);

    // If true, it is legal to create child nodes.
    Boolean[1..1] isDirectory = site_nodes.directory_p BIT;

    // If true, URLs that are logical children of this node should
    // be mapped to this node, e.g. "www.arsdigita.com/news/item123"
    // would be mapped to this node still.
    Boolean[1..1] isPattern = site_nodes.pattern_p BIT;

    SiteNode[0..1] parent = join site_nodes.parent_id to site_nodes.node_id;

    component SiteNode[0..n] children =
        join site_nodes.node_id to site_nodes.parent_id;

    PackageInstance[0..1] mountedObject =
        join site_nodes.object_id to apm_packages.package_id;

    Stylesheet[0..n] defaultStyle = join site_nodes.node_id
                                      to acs_stylesheet_node_map.node_id,
                                    join acs_stylesheet_node_map.stylesheet_id
                                      to acs_stylesheets.stylesheet_id;

    unique (parent, name);

    reference key ( site_nodes.node_id );

    aggressive load (parent.id);
}


data operation updateSiteNodeDescendants {
    do {
        update site_nodes
        set url = :newPrefix || substr(url, :oldPrefixLength + 1)
        where url like :oldPrefix || '%'
        and not node_id = :id
    }
}
