//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model com.arsdigita.kernel;

// SiteNode Object Type Definition
//
// A "site node" is a node in a URL hierarchy that can be mapped
// to an application instance.
//
// @author <a href="mailto:bquinn@arsdigita.com">Bryan Quinn</a>
// @version "$Id: //core-platform/dev/pdl/com/arsdigita/kernel/SiteNode.pdl#2 $" 
//

object type SiteNode extends ACSObject {
    String name;
    String url;
    
    // If true, it is legal to create child nodes. 
    Boolean isDirectory;

    // If true, URLs that are logical children of this node should
    // be mapped to this node, e.g. "www.arsdigita.com/news/item123" 
    // would be mapped to this node still.
    Boolean isPattern;

    SiteNode[0..1] parent;
    composite SiteNode[0..n] children;	    
    PackageInstance[0..1] mountedObject;
    Stylesheet[0..n] defaultStyle;

    retrieve {
        do {
            SELECT sn.node_id, sn.parent_id,
            sn.name, sn.url, sn.directory_p, sn.pattern_p, 
            o.object_type, o.display_name, o.default_domain_class
            FROM site_nodes sn, acs_objects o
            WHERE sn.node_id = o.object_id
            AND node_id = :id
        } map {	
            id = sn.node_id;
            name = sn.name;
            url = sn.url;
            isDirectory = sn.directory_p;
            isPattern = sn.pattern_p;
            objectType = o.object_type;
            displayName = o.display_name;
            defaultDomainClass = o.default_domain_class;
        }
    }

    retrieve all {
        do {
            SELECT sn.node_id, sn.parent_id,
            sn.name, sn.url, sn.directory_p, sn.pattern_p, 
            o.object_type, o.display_name
            FROM site_nodes sn, acs_objects o
            WHERE sn.node_id = o.object_id
        } map {	
            id = sn.node_id;
            name = sn.name;
            url = sn.url;
            isDirectory = sn.directory_p;
            isPattern = sn.pattern_p;
            objectType = o.object_type;
            displayName = o.display_name;
        }
    }

    insert {
        super;

        do {
            INSERT INTO site_nodes
            (node_id, parent_id, name, url, directory_p, pattern_p, object_id)
            VALUES
            (:id, :parent.id, :name, :url, :isDirectory, :isPattern, null)
        }
    }

    update {
        super;
        do {
            UPDATE site_nodes SET
            parent_id = :parent.id,
            name = :name,
            url = :url,
            directory_p = :isDirectory,
            pattern_p = :isPattern
            WHERE node_id = :id
        }
    }

    // Because the children assocation is composite,
    // the persistence system is responsible for deleting
    // all children recursively.  A "clear children" event 
    // below is useful to make this more efficient.  However,
    // the system should be able to delete it even without the event.
    delete {
        do {
            DELETE from site_nodes
            where node_id = :id
        }
        super;
    }

    retrieve mountedObject {
        do {
            SELECT ap.pretty_name, ap.package_id,
            o.object_type, o.display_name
            FROM apm_packages ap, acs_objects o, site_nodes sn
            WHERE ap.package_id = o.object_id
            AND sn.object_id = o.object_id
            AND sn.node_id = :id
        } map {
            mountedObject.id = ap.package_id;
            mountedObject.prettyName = ap.pretty_name;
            mountedObject.objectType = o.object_type;
            mountedObject.displayName = o.display_name;
        }
    }

    add mountedObject {
        do {
            UPDATE site_nodes
            SET object_id = :mountedObject.id
            WHERE node_id = :id
        }
    }

    remove mountedObject {
        do {	    
            UPDATE site_nodes
            SET object_id = null
            WHERE node_id = :id
        }
    }

    // XXX bquinn@arsdigita.com (5/17/2001)
    // This ugly join is currently necessary because the persistence
    // system does not provide a convenient method to follow an 0..1
    // multiplicity assocation.

    retrieve parent {
        do {
            SELECT sn.node_id, sn.parent_id, 
            sn.name, sn.url, sn.directory_p, sn.pattern_p, 
            o.object_type, o.display_name
            FROM site_nodes sn, site_nodes child, acs_objects o
            WHERE sn.node_id = child.parent_id 
            AND o.object_id = sn.node_id
            AND child.node_id = :id
        } map {
            parent.id = sn.node_id;
            parent.objectType = o.object_type;
            parent.displayName = o.display_name;
            parent.name = sn.name;
            parent.url = sn.url;
            parent.isDirectory = sn.directory_p;
            parent.isPattern = sn.pattern_p;    
        }
    }

    add parent {
        do {
            UPDATE site_nodes
            SET parent_id = :parent.id
            WHERE node_id = :id
        }
    }

    remove parent {
        do {
            UPDATE site_nodes
            SET parent_id = null
            WHERE node_id = :id
        }
    }

    retrieve children {
        do {
            SELECT sn.node_id, sn.parent_id, 
            sn.name, sn.url, sn.directory_p, sn.pattern_p, 
            o.object_type, o.display_name
            FROM site_nodes sn, acs_objects o
            WHERE o.object_id = sn.node_id
            AND parent_id = :id
        } map {
            children.id = sn.node_id;
            children.objectType = o.object_type;
            children.displayName = o.display_name;
            children.name = sn.name;	    
            children.url = sn.url;	    
            children.isDirectory = sn.directory_p;
            children.isPattern = sn.pattern_p;	   
        }
    }
    
    add defaultStyle {
        do {
            INSERT INTO acs_stylesheet_node_map
            (stylesheet_id, node_id)
            VALUES
            (:defaultStyle.id, :id)
        }
    }

    remove defaultStyle {
        do {
            DELETE FROM acs_stylesheet_node_map
            WHERE node_id = :id
            AND stylesheet_id = :defaultStyle.id
        }
    }

    retrieve defaultStyle {
        do {
            SELECT ss.stylesheet_id, ss.output_type, ss.locale_id,
	        ss.pathname, ss.item_id, o.object_type, o.display_name
            FROM acs_stylesheets ss, acs_stylesheet_node_map asm, 
                 acs_objects o
            WHERE ss.stylesheet_id = asm.stylesheet_id
            AND ss.stylesheet_id = o.object_id
            AND asm.node_id = :id
            ORDER BY nvl(locale_id, 0) DESC
        } map {
            defaultStyle.id = ss.stylesheet_id;
            defaultStyle.pathName = ss.pathname;
            defaultStyle.objectType = o.object_type;
            defaultStyle.displayName = o.display_name;
            defaultStyle.outputType = ss.output_type;
            defaultStyle.itemID = ss.item_id;
            defaultStyle.localeID = ss.locale_id;
        }
    }
}

query rootSiteNode {
    do {
        SELECT sn.node_id, sn.parent_id,
        sn.name, sn.url, sn.directory_p, sn.pattern_p
        FROM site_nodes sn
        WHERE sn.parent_id is null
        AND sn.name is null
    } map {
        id = sn.node_id;
        name = sn.name;
        url = sn.url;
        isDirectory = sn.directory_p;
        isPattern = sn.pattern_p;
    }
}

query allSiteNodes {
    do {
        SELECT sn.node_id, sn.parent_id, 
        sn.name, sn.url, sn.directory_p, sn.pattern_p
        FROM site_nodes sn
    } map {
        id = sn.node_id;
        name = sn.name;
        url = sn.url;
        isDirectory = sn.directory_p;
        isPattern = sn.pattern_p;
    }
}

query siteNodeDescendants {
    do {
        SELECT sn.node_id
        FROM site_nodes sn
        CONNECT BY sn.parent_id = PRIOR sn.node_id
        START WITH sn.node_id = :node_id
    } map {
        id = sn.node_id;
    }
}
