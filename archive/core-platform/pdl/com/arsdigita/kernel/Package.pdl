//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

// Definiton of Package Metadata
//
// @author <a href="mailto:bquinn@arsdigita.com">Bryan Quinn</a>
// @version "$Id: //core-platform/dev/pdl/com/arsdigita/kernel/Package.pdl#1 $" 

model com.arsdigita.kernel;

import com.arsdigita.globalization.*;

object type PackageType {
    BigDecimal id = apm_package_types.package_type_id INTEGER;
    String packageKey = apm_package_types.package_key VARCHAR(100);
    String prettyName = apm_package_types.pretty_name VARCHAR(100);
    String prettyPlural = apm_package_types.pretty_plural VARCHAR(100);
    String packageURI = apm_package_types.package_uri VARCHAR(1500);
    String dispatcherClass = apm_package_types.dispatcher_class VARCHAR(100);
    // XXX: Deprecated.
    String servletPackage = apm_package_types.servlet_package VARCHAR(100);

    Stylesheet[0..n] defaultStyle;
    PackageListener[0..n] listener;
    composite PackageInstance[0..n] packageInstance;

    object key(id);

    add listener {
        do {
            INSERT INTO apm_package_type_listener_map
            (package_type_id, listener_id)
            VALUES
            (:id, :listener.id)
        }
    }

    remove listener {
        do {
            DELETE FROM apm_package_type_listener_map
            WHERE package_type_id = :id
            AND listener_id = :listener.id
        }
    }

    retrieve listener {
        do {
            SELECT al.listener_class, al.listener_id
            FROM apm_listeners al, apm_package_type_listener_map am
            WHERE al.listener_id = am.listener_id
            AND am.package_type_id = :id
        } map {
            listener.id = al.listener_id;
            listener.listenerClass = al.listener_class;
        }
    }

    retrieve defaultStyle {
        do {
            SELECT ss.stylesheet_id, ss.locale_id, ss.output_type, 
	        ss.pathname, ss.item_id, o.object_type, o.display_name
            FROM acs_stylesheets ss, acs_stylesheet_type_map ast, 
                 acs_objects o
            WHERE ast.package_type_id = :id
            AND ss.stylesheet_id = ast.stylesheet_id
            AND ss.stylesheet_id = o.object_id
            ORDER BY nvl(locale_id, 0) DESC
        } map {
            defaultStyle.id = ss.stylesheet_id; 
            defaultStyle.objectType = o.object_type;
            defaultStyle.displayName = o.display_name;
            defaultStyle.outputType = ss.output_type;
            defaultStyle.pathName = ss.pathname;
            defaultStyle.itemID = ss.item_id;
            defaultStyle.localeID = ss.locale_id;
        }
    }

    add defaultStyle {
        do {
            INSERT INTO acs_stylesheet_type_map
            (stylesheet_id, package_type_id)
            VALUES
            (:defaultStyle.id, :id)
        }
    }

    remove defaultStyle {
        do {
            DELETE FROM acs_stylesheet_type_map
            WHERE package_type_id = :id
            AND stylesheet_id = :defaultStyle.id
        }
    }
    
    retrieve packageInstance {
        do {
            SELECT ap.pretty_name, ap.package_id,
            o.object_type, o.display_name
            FROM apm_packages ap, acs_objects o 
            WHERE ap.package_type_id = :id
            AND ap.package_id = o.object_id
        } map {
            packageInstance.prettyName = ap.pretty_name;
            packageInstance.id = ap.package_id;
            packageInstance.objectType = o.object_type;
            packageInstance.displayName = o.display_name;
        }
    }
}

object type PackageListener {
    String listenerClass = apm_listeners.listener_class VARCHAR(100);
    BigDecimal id = apm_listeners.listener_id INTEGER;
    PackageType[0..n] packageType;
    
    object key (id);

}

object type PackageInstance extends ACSObject {
    String prettyName = apm_packages.pretty_name;
    SiteNode[0..n] mountPoint 
        = join apm_packages.package_id to site_nodes.object_id;
    PackageType[1..1] packageType 
        = join apm_packages.package_type_id 
            to apm_package_types.package_type_id;
    Locale[0..1] locale 
        = join apm_packages.locale_id to g11n_locales.locale_id;

    reference key (apm_packages.package_id);

    retrieve {
        do {
            SELECT ap.pretty_name, o.object_type, o.display_name, 
            o.default_domain_class
            FROM apm_packages ap, acs_objects o
            WHERE ap.package_id = :id
            AND ap.package_id = o.object_id
        } map {
            prettyName = ap.pretty_name;
            objectType = o.object_type;
            displayName = o.display_name;
            defaultDomainClass = o.default_domain_class;
        }
    }

    insert {
        super;
        do {
            INSERT INTO apm_packages ap 
            (package_id, package_type_id, pretty_name) 
            VALUES
            (:id, :packageType.id, :prettyName)
        }
    }

    update {
        super;
        do {
            UPDATE apm_packages 
            SET pretty_name = :prettyName
            WHERE package_id = :id
        }
    }

    delete {
        do {
            UPDATE site_nodes
            SET object_id = null
            WHERE object_Id = :id
        }
        do {
            DELETE from apm_packages
            WHERE package_id = :id
        }
        super;
    }

    retrieve mountPoint {
        do {
            SELECT sn.*
            FROM site_nodes sn
            WHERE sn.object_id = :id
        } map {
            mountPoint.id = sn.node_id;
            mountPoint.name = sn.name;
            mountPoint.isDirectory = sn.directory_p;
            mountPoint.isPattern = sn.pattern_p;	
        }
    }

    add mountPoint {
        do {
            UPDATE site_nodes
            SET object_id = :id
            WHERE node_id = :mountPoint.id
        }
    }

    clear mountPoint {
        do {
            UPDATE site_nodes
            SET object_id = null
            where object_id = :id
        }
    }

    retrieve packageType {
        do {	
            SELECT apt.pretty_name, apt.pretty_plural, apt.package_uri,
            apt.package_key, apt.servlet_package, apt.dispatcher_class,
            apt.package_type_id
            FROM apm_package_types apt, apm_packages ap
            WHERE ap.package_id = :id
            AND apt.package_type_id = ap.package_type_id
        } map {
            packageType.id = apt.package_type_id;
            packageType.prettyName = apt.pretty_name;
            packageType.packageKey = apt.package_key;
            packageType.prettyPlural = apt.pretty_plural;
            packageType.packageURI = apt.package_uri;
            packageType.servletPackage = apt.servlet_package;
            packageType.dispatcherClass = apt.dispatcher_class;
        }
    }

    add packageType {
        do {
            UPDATE apm_packages
            SET package_type_id = :packageType.id
            WHERE package_id = :id
        }
    }

    retrieve locale {
        do {
            select g11n_locales.locale_id,
                   g11n_locales.language,
                   g11n_locales.country,
                   g11n_locales.variant
            from apm_packages,
                 g11n_locales
            where apm_packages.package_id = :id
            and apm_packages.locale_id = g11n_locales.locale_id
        } map {
            locale.id = g11n_locales.locale_id;
            locale.language = g11n_locales.language;
            locale.country = g11n_locales.country;
            locale.variant = g11n_locales.variant;
        }
    }

    add locale {
        do {
            update apm_packages
            set locale_id = :locale.id
            where package_id = :id
        }
    }

    clear locale {
        do {
            update apm_packages
            set locale_id = null
            where package_id = :id
        }
    }
}