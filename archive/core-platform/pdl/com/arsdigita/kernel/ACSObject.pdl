//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

model com.arsdigita.kernel;

object type ACSObject {
    BigDecimal[1..1] id = acs_objects.object_id;
    String[1..1] objectType = acs_objects.object_type;

    // <font color="red">Experimental</font>
    String[1..1] displayName = acs_objects.display_name;

    // <font color="red">Experimental</font>
    String[1..1] defaultDomainClass = acs_objects.default_domain_class;

    // <font color="red">Experimental</font>
    // The value of this property is maintained automatically by
    // the ACSObject java class.  Derived classes define a getContainer()
    // method, and ACSObject.save() will denormalize the result of
    // getContainer() by storing a reference to it in this property.
    ACSObject[0..1] container = 
         join acs_objects.object_id to object_container_map.object_id, 
         join object_container_map.container_id to acs_objects.object_id;

    object key (id);

    // aggressive load (container.id);

    insert {
        do {
            insert into acs_objects 
            (object_id, object_type, display_name, default_domain_class)
            values
            (:id, :objectType, :displayName, :defaultDomainClass)
        }

        do {
            insert into object_container_map
            (object_id, container_id)
            select :id, :container.id 
            from dual 
            where :container.id is not null
        }
    }

    update {
        do {
            update object_container_map
            set container_id = :container.id
            where object_id = :id and :container.id is not null
        }

        // We have to conditionally insert into object_container_map
        // in case the container was previously null (thus no mapping
        // exists and the above update statement does nothing).
        do {
            insert into object_container_map
            (object_id, container_id)
            select :id, :container.id
            from dual
            where :container.id is not null
            and not exists (
                select 1 from object_container_map
                where object_id = :id
            )
        }

        // conditionally delete the object-container mapping if the
        // container was set to null.
        do {
            delete from object_container_map
            where object_id = :id and :container.id is null
        }

        do {
            update acs_objects 
            set object_type = :objectType,
                display_name = :displayName,
                default_domain_class = :defaultDomainClass
            where object_id = :id
        }
    }

    add container {}
    remove container {}

}

query PackageInstanceForObject {
    PackageInstance packageInstance;

    do {
        SELECT ap.package_id, ap.pretty_name,
               o.object_type, o.display_name, o.default_domain_class
        FROM apm_packages ap, acs_objects o
        WHERE ap.package_id = o.object_id
        AND (ap.package_id = :objectID OR 
             ap.package_id in (select container_id 
                               from object_container_map
                               start with object_id = :objectID
                               connect by prior container_id = object_id))
    } map {
        packageInstance.id = ap.package_id;
        packageInstance.prettyName = ap.pretty_name;
        packageInstance.objectType = o.object_type;
        packageInstance.displayName = o.display_name;
        packageInstance.defaultDomainClass = o.default_domain_class;
    }
}