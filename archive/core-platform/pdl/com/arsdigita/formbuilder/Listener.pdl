//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

// This object type is used to persist Bebop listeners.
//
// @author <a href="mailto:pmarklun@arsdigita.com">Peter Marklund</a>
// @version $Id: //core-platform/dev/pdl/com/arsdigita/formbuilder/Listener.pdl#1 $
//

model com.arsdigita.formbuilder;


// The pdl parser will not let me import just ACSObject
import com.arsdigita.kernel.*;


object type Listener extends ACSObject {
    String[0..1] className = bebop_listeners.class_name VARCHAR(150); 
    String[0..1] attributeString = bebop_listeners.attribute_string VARCHAR(4000);
    reference key (bebop_listeners.listener_id);
}

// The Form Builder does not currently support reusable listeners
// Therefore I am using a composite association. Composite association means
// that a listener can only belong to one component. If the component is deleted
// the listeners should be deleted too (cascading delete). This cascading delete is implied by the 1..1
// multiplicity but is not enforced by the persistence layer
association {
    Widget[1..1] widget = join  bebop_listeners.listener_id to bebop_listener_map.listener_id,
                            join bebop_listener_map.component_id to bebop_widgets.widget_id;
    composite Listener[0..n] listeners = join bebop_widgets.widget_id to bebop_listener_map.component_id,
                            join  bebop_listener_map.listener_id to bebop_listeners.listener_id;
}

// I think this should be an event of the association
data operation ClearListeners {
    do {
        declare
            cursor c_listeners is 
                select listener_id
                from bebop_listener_map
                where component_id = :widgetID;

        begin
            for v_listener in c_listeners loop
                delete from bebop_listener_map
                    where listener_id = v_listener.listener_id;

                delete from bebop_listeners
                    where listener_id = v_listener.listener_id;                    
            end loop;
        end;
    }
}
