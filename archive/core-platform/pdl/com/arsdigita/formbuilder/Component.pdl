//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

//
// This object type, and its subtypes, are used to persist Bebop Components. 
// The Component object type is designed to cover the attributes in the
// SimpleComponent class. An exception to this is that I am omitting the key
// attribute since it does not seem to be commonly needed yet. 
// Examples of Bebop Component classes that the Form Builder service will attempt
// to persist are Forms, FormSections, Labels and different Widgets 
// (like TextField, TextArea, RadioGroup, MultipleSelect and 
// SingleSelect). I chose to let the Component type extend
// ACSObject so that we would need the permissioning system or other
// ACSObject services. 
//
// @author <a href="mailto:pmarklun@arsdigita.com">Peter Marklund</a>
// @version $Id: //core-platform/dev/pdl/com/arsdigita/formbuilder/Component.pdl#6 $
//

model com.arsdigita.formbuilder;


// The pdl parser will not let me import just ACSObject
import com.arsdigita.kernel.*;

object type Component extends ACSObject {
    String[1..1] adminName = bebop_components.admin_name VARCHAR(100);
    String[0..1] description = bebop_components.description VARCHAR(4000);
    String[0..1] attributeString = bebop_components.attribute_string VARCHAR(4000);
    Boolean[0..1] isActive = bebop_components.active_p CHAR(1);

    reference key (bebop_components.component_id);
}

//
// Disabled pending reworking of the whole PersistentContainerHelper
// class and removal of the old UI.
association {
    Component[0..1] componentContainer = join bebop_components.component_id
                                  to bebop_component_hierarchy.component_id,
                                join bebop_component_hierarchy.container_id
                                  to bebop_components.component_id;
    Component[0..n] \component = join bebop_components.component_id
                                   to bebop_component_hierarchy.container_id,
                                 join bebop_component_hierarchy.component_id
                                   to bebop_components.component_id;
    BigDecimal[1..1] orderNumber = bebop_component_hierarchy.order_number INTEGER;
    Boolean[1..1] isSelected = bebop_component_hierarchy.selected_p CHAR(1);
}
