//
// Copyright (C) 2001 ArsDigita Corporation. All Rights Reserved.
//
// The contents of this file are subject to the ArsDigita Public 
// License (the "License"); you may not use this file except in
// compliance with the License. You may obtain a copy of
// the License at http://www.arsdigita.com/ADPL.txt
//
// Software distributed under the License is distributed on an "AS
// IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
// implied. See the License for the specific language governing
// rights and limitations under the License.
//

//
// This object type, and its subtypes, are used to persist Bebop Components. 
// The Component object type is designed to cover the attributes in the
// SimpleComponent class. An exception to this is that I am omitting the key
// attribute since it does not seem to be commonly needed yet. 
// Examples of Bebop Component classes that the Form Builder service will attempt
// to persist are Forms, FormSections, Labels and different Widgets 
// (like TextField, TextArea, RadioGroup, MultipleSelect and 
// SingleSelect). I chose to let the Component type extend
// ACSObject so that we would need the permissioning system or other
// ACSObject services. 
//
// @author <a href="mailto:pmarklun@arsdigita.com">Peter Marklund</a>
// @version $Id: //core-platform/dev/pdl/com/arsdigita/formbuilder/Component.pdl#4 $
//

model com.arsdigita.formbuilder;


// The pdl parser will not let me import just ACSObject
import com.arsdigita.kernel.*;


object type Component extends ACSObject {
    String[1..1] adminName = bebop_components.admin_name;
    String[0..1] description = bebop_components.description;
    String[0..1] attributeString = bebop_components.attribute_string;
    Boolean[0..1] isActive = bebop_components.active_p;

    reference key (bebop_components.component_id);
}

//
// Disabled pending reworking of the whole PersistentContainerHelper
// class and removal of the old UI.
association {
    Component[0..1] container;
    Component[0..n] component;
    BigDecimal[1..1] orderNumber;
    Boolean[1..1] isSelected;

    retrieve container {
        do {
           select a.object_id,
                  a.object_type,
                  a.display_name,
                  a.default_domain_class,
                  c.admin_name,
                  c.description,
                  c.attribute_string,
                  c.active_p,
                  h.order_number,
                  h.selected_p
             from acs_objects a,
                  bebop_components c,
                  bebop_component_hierarchy h
            where a.object_id = c.component_id
              and c.component_id = h.container_id
              and h.component_id = :component.id
       } map {
           container.id = a.object_id;
           container.objectType = a.object_type;
           container.displayName = a.display_name;
           container.defaultDomainClass = a.default_domain_class;
           container.adminName = c.admin_name;
           container.description = c.description;
           container.attributeString = c.attribute_string;
           container.isActive = c.active_p;
           orderNumber = h.order_number;
           isSelected = h.selected_p;
       }
   }
//
   retrieve component {
       do {
           select a.object_id,
                  a.object_type,
                  a.display_name,
                  a.default_domain_class,
                  c.admin_name,
                  c.description,
                  c.attribute_string,
                  c.active_p,
                  h.order_number,
                  h.selected_p
             from acs_objects a,
                  bebop_components c,
                  bebop_component_hierarchy h
            where a.object_id = c.component_id
              and c.component_id = h.component_id
              and h.container_id = :container.id
       } map {
           component.id = a.object_id;
           component.objectType = a.object_type;
           component.displayName = a.display_name;
           component.defaultDomainClass = a.default_domain_class;
           component.adminName = c.admin_name;
           component.description = c.description;
           component.attributeString = c.attribute_string;
           component.isActive = c.active_p;
           orderNumber = h.order_number;
           isSelected = h.selected_p;
       }
   }
//
   add {
       do {
           insert into bebop_component_hierarchy 
               (container_id, component_id, order_number, selected_p)
           values 
               (:container.id, :component.id, :orderNumber, :isSelected)        
       }
   }
//
   remove {
       do {
           delete from bebop_component_hierarchy
               where container_id = :container.id
                 and component_id = :component.id
       }
   }
//
   update {
       do {
           update bebop_component_hierarchy
               set order_number = :orderNumber,
                   selected_p = :isSelected
             where container_id = :container.id
               and component_id = :component.id
       }
   }
}
//
